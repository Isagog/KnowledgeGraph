openapi: 3.0.2
info:
  title: Isagog Knowledge Graph Knowledge Service
  version: 1.0.0
  description: Isagog Knowledge Graph Knowledge module
  contact:
    name: Isagog Srl
    email: ks-api@isagog.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: http://localhost:8030
    variables:
      port:
        default: '8030'
      basePath:
        default: /knowledge
tags:
  - name: KnowledgeService
    description: Ontology and reasoning functionalities (read-only)

paths:

  /graphs:
    summary: Knowledge graphs
    description: >
      A Knowledge Graph (KG) is a set of statements (assertions) based on unary or binary predicates defined in some ontology
    get:
      summary: Get KGs
      description: Get all the known KGs
      operationId: getAllGraphs
      responses:
         200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/KnowledgeGraph'
         401:
          description: No results
         402:
          description: Invalid query
         403:
          description: Invalid attribute
         501:
          description: Service unavailable
         502:
          description: Server error
         503:
          description: Missing implementation
      tags:
        - KnowledgeService

  /concepts:
    summary: Atomic concepts of KGs ontologies
    description: >
      Atomic concepts are primitive non relational concepts in the Knowledge Graph ontology
    get:
      summary: Get all the concepts in the Knowledge Graph
      description: Get all the atomic concepts in the Knowledge Graph
      operationId: getAllConcepts
      parameters:
        - name: kg
          in: query
          description: The KG id (opt)
          required: false
          schema:
            type: string
            format: id
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Concept'
        401:
          description: No results
        402:
          description: Invalid query
        403:
          description: Invalid attribute
        501:
          description: Service unavailable
        502:
          description: Server error
        503:
          description: Missing implementation
      tags:
      - KnowledgeService

  /relations:
    get:
      summary: Gets all the relations in the Knowledge Graph ontology
      description: Gets a relation
      operationId: getAllRelations
      parameters:
        - name: kg
          in: query
          description: The KG id (opt)
          required: false
          schema:
            type: string
            format: id
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Relation'
        401:
          description: No results
        402:
          description: Invalid query
        403:
          description: Invalid attribute
        501:
          description: Service unavailable
        502:
          description: Server error
        503:
          description: Missing implementation
      tags:
        - KnowledgeService
        
  /attributes:
    get:
      summary: Gets all attributes in the Knowledge Graph ontology
      description: Gets an attirbute
      operationId: getAllAttributes
      parameters:
        - name: kg
          in: query
          description: The KG id (opt)
          required: false
          schema:
            type: string
            format: id
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Attribute'
        401:
          description: No results
        402:
          description: Invalid query
        403:
          description: Invalid attribute
        501:
          description: Service unavailable
        502:
          description: Server error
        503:
          description: Missing implementation
      tags:
        - KnowledgeService    
        
  /frames:
    get:
      summary: Gets all the frames in the Knowledge Graph ontology
      description: Gets a frame
      operationId: getAllFrames
      parameters:
        - name: kg
          in: query
          description: The KG id (opt)
          required: false
          schema:
            type: string
            format: id
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Frame'
        401:
          description: No results
        402:
          description: Invalid query
        403:
          description: Invalid attribute
        501:
          description: Service unavailable
        502:
          description: Server error
        503:
          description: Missing implementation
      tags:
        - KnowledgeService
        
  /concepts/{id}:
    summary: Gets a concept
    description: >
      This resource represents an individual concept in the Knowledge Graph ontology. Each concept is identified by a unique string `id`.
    get:
      summary: Gets a concept
      description: Gets a concept
      operationId: getConcept
      parameters:
        - name: id
          in: path
          description: The concept's id
          required: true
          schema:
            type: string
            format: id
        - name: kg
          in: query
          description: The KG id
          required: true
          schema:
            type: string
            format: id
        - name: details
          description: Details to be fetched (opt), defaults to any
          in: path
          required: true
          schema:
             $ref: '#/components/schemas/ConceptualDetails'
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Concept'
        401:
          description: No results
        402:
          description: Invalid query
        403:
          description: Invalid attribute
        501:
          description: Service unavailable
        502:
          description: Server error
        503:
          description: Missing implementation
      tags:
        - KnowledgeService
        
  /relations/{id}:
    get:
      summary: Gets a relation
      description: Gets a relation
      operationId: getRelation
      parameters:
        - name: id
          in: path
          required: true
          description: The relation's id
          schema:
            type: string
            format: id
        - name: kg
          in: query
          description: The KG id (opt)
          required: true
          schema:
            type: string
            format: id
        - name: details
          description: Details to be fetched (opt), defaults to any
          in: path
          required: true
          schema:
              $ref: '#/components/schemas/ConceptualDetails'
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                 $ref: '#/components/schemas/Relation'
        401:
          description: No results
        402:
          description: Invalid query
        403:
          description: Invalid attribute
        501:
          description: Service unavailable
        502:
          description: Server error
        503:
          description: Missing implementation
      tags:
        - KnowledgeService
        
  /attributes/{id}:
      get:
        summary: Gets an attribute
        description: Gets an attirbute
        operationId: getAttribute
        parameters:
          - name: id
            in: path
            required: true
            description: The attribute's id
            schema:
              type: string
              format: id
          - name: kg
            in: query
            description: The KG id (opt)
            required: true
            schema:
              type: string
              format: id
          - name: details
            description: Details to be fetched (opt), defaults to any
            in: path
            required: true
            schema:
               $ref: '#/components/schemas/ConceptualDetails'
        responses:
          200:
            description: Successful operation
            content:
              application/json:
                schema:
                   $ref: '#/components/schemas/Attribute'
          401:
            description: No results
          402:
            description: Invalid query
          403:
            description: Invalid attribute
          501:
            description: Service unavailable
          502:
            description: Server error
          503:
            description: Missing implementation
        tags:
          - KnowledgeService
          

    
  /frames/{id}:
    get:
      summary: Gets a frame
      description: Gets a frame
      operationId: getFrame
      parameters:
        - name: id
          in: path
          required: true
          description: The frame's id
          schema:
            type: string
            format: id
        - name: kg
          in: query
          description: The KG id (opt)
          required: false
          schema:
            type: string
            format: id
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                 $ref: '#/components/schemas/Frame'
        401:
          description: No results
        402:
          description: Invalid query
        403:
          description: Invalid attribute
        501:
          description: Service unavailable
        502:
          description: Server error
        503:
          description: Missing implementation
      tags:
        - KnowledgeService
        

  /axioms/inclusion:
    get:
      summary: Tells about inclusion dependencies
      operationId: includes
      parameters:
        - name: sup
          in: query
          description: Candidate super classifier
          required: true
          schema:
            type: string
            format: id
        - name: sub
          in: query
          description: Candidate sub classifier
          required: true
          schema:
            type: string
            format: id
        - name: kg
          in: query
          description: The KG id (opt)
          required: false
          schema:
            type: string
            format: id
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: boolean
        401:
          description: No results
        402:
          description: Invalid argument pair
        403:
          description: Unknown superclass
        404:
         description: Unwnown subclass
        501:
          description: Service unavailable
        502:
          description: Server error
        503:
          description: Missing implementation
      tags:
        - KnowledgeService

  /axioms/disjontness:
    get:
      summary: Tells about disjointess
      operationId: disjoint
      parameters:
        - name: first
          in: query
          description: Candidate classifier
          required: true
          schema:
            type: string
            format: id
        - name: second
          in: query
          description: Candidate classifier
          required: true
          schema:
            type: string
            format: id
        - name: kg
          in: query
          description: The KG id (opt)
          required: false
          schema:
            type: string
            format: id
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: boolean
        401:
          description: No results
        402:
          description: Invalid argument pair
        403:
          description: Unknown first
        404:
          description: Unwnown second
        501:
          description: Service unavailable
        502:
          description: Server error
        503:
          description: Missing implementation
      tags:
        - KnowledgeService


  /knowledge/search:
   get:
    summary: Knowledge search
    description: Search knowledge items
    operationId: search
    parameters:
      - name: query
        in: query
        description: The value to search by
        required: true
        schema:
          type: string
          format: utf-8
      - name: attribute
        in: query
        description: Attribute to search by, either an annotation or a data property
        required: false
        schema:
          type: string
          default: "rdfs:label"
      - name: ktype
        in: query
        description: Narrow search to a specific knowledge type
        required: false
        schema:
          $ref: '#/components/schemas/KnowledgeType'
      - name: details
        in: query
        description: 'Details to be returned: e.g. for predicates: FULL=full hierarchy, SUMMARY=direct super\subordinates, IDENTIFIER=id only'
        required: false
        schema:
          $ref: '#/components/schemas/ConceptualDetails'
      - name: kg
        in: query
        description: The KG id (opt)
        required: false
        schema:
         type: string
         format: id
    responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                   $ref: '#/components/schemas/KnowledgeElement'

        401:
          description: No results
        402:
          description: Invalid query
        403:
          description: Invalid attribute
        501:
          description: Service unavailable
        502:
          description: Server error
        503:
          description: Missing implementation
    tags:
        - KnowledgeService

components:
  schemas:


    KnowledgeElement:
      description: Element in a Knowledge Graph (abstract)
      type: object
      required:
        - id
        - ktype
      properties:
        id:
          description: Element identifier
          type: string
        ktype:
          description: Knowledge element type, MUST be one of KnowledgeType enum
          type: string
        graph:
          description: Knowledge Graph id (opt)
          type: string
          format: id
        annotations:
          description: Knowledge annotations
          type: array
          items:
            $ref: '#/components/schemas/KnowledgeAnnotation'
      discriminator:
        propertyName: ktype
        mapping:
          CONCEPT:             '#/components/schemas/Concept'
          RELATION:            '#/components/schemas/Relation'
          ATTRIBUTE:           '#/components/schemas/Attribute'
          ENTITY:              '#/components/schemas/Entity'
          STATEMENT:           '#/components/schemas/Statement'
          FRAME:               '#/components/schemas/Frame'
          CONCEPTUALSLOT:      '#/components/schemas/ConceptualSlot'
          RELATIONALSLOT:      '#/components/schemas/RelationalSlot'
          ATTRIBUTIVESLOT:     '#/components/schemas/AttributiveSlot'

    KnowledgeAnnotation:
      description: Base class for knowledge annotations
      required:
        - atype
      properties:
        atype:
          description: Annotation type, should be aligned to the subclass name
          type: string
        label:
          description: Annotation label (opt)
          type: string
      discriminator:
        propertyName: atype
        mapping:
          LANGANNOTATION:  '#/components/schemas/LanguageAnnotation'
          METANNOTATION:   '#/components/schemas/MetaclassAnnotation'
          INFOANNOTATION: '#/components/schemas/InformativeAnnotation'

    AnnotationType:
      type: string
      enum:
        - LANGANNOTATION
        - METANNOTATION
        - INFOANNOTATION

    LanguageAnnotation:
      description: Linguistic attachment to knowledge elements
      allOf:
        - $ref: '#/components/schemas/KnowledgeAnnotation'
      required:
         - form
      properties:
        lang:
          $ref: kg-language.yaml#/components/schemas/Language
        pos:
          $ref: kg-language.yaml#/components/schemas/PartOfSpeech
        form:
          description: Linguistic rendering (base form)
          type: string
        regex:
          description: Regular expression to match occurrences (opt)
          type: string

    MetaclassAnnotation:
      description: Metaclass annotation
      allOf:
        - $ref: '#/components/schemas/KnowledgeAnnotation'
      required:
        - label

    InformativeAnnotation:
      description: Informative annotation
      allOf:
        - $ref: '#/components/schemas/KnowledgeAnnotation'
      required:
        - label


    KnowledgeGraph:
      description: Knowledge Graph
      type: object
      required:
        - id
        - source
      properties:
        id:
          description: Graph identifier
          type: string
          format: id
        source:
          description: Graph source identifier (uri)
          type: string
          format: iri
        dimension:
          description: Number of predicates
          type: integer
          minimum: 0

    KnowledgeType:
      type: string
      enum:
        - CONCEPT
        - RELATION
        - ATTRIBUTE
        - ENTITY
        - FRAME
        - STATEMENT
        - CONCEPTUALSLOT
        - RELATIONALSLOT
        - ATTRIBUTIVESLOT

    EvaluationMethod:
      type: string
      enum:
        - DEDUCTION
        - ABDUCTION


    Classifier:
      description: Classifying predicate
      allOf:
        - $ref: '#/components/schemas/KnowledgeElement'
      properties:
        superclasses:
          type: array
          items:
            type: string
            format: id
        subclasses:
          type: array
          items:
            type: string
            format: id
        disjointclasses:
          type: array
          items:
            type: string
            format: id

    Concept:
      description: Unary classifier, can be atomic, or defined as a restriction on Relation or Attributes
      allOf:
        - $ref: '#/components/schemas/Classifier'
      type: object
      properties:
        property:
          description: For concept defined as a restricion, the Relation or Attribute identifier (opt)
          type: string
          format: id
        related:
          description: For relational concepts, the restriction concept (opt)
          type: string
          format: id
        quantifier:
          $ref: '#/components/schemas/Quantifier'
        value:
          description: For attributive concepts, the restriction value (opt)
          type: string
          format: utf-8
        constraint:
          $ref: '#/components/schemas/Comparator'


    Quantifier:
      type: string
      enum:
        - SOME
        - ALL
        - ATLEAST1
        - ATMOST1

    Relation:
      description: Binary classifier
      allOf:
        - $ref: '#/components/schemas/Classifier'
      properties:
        domain:
          description: Domain restriction
          type: array
          items:
            type: string
            format: id
        range:
          description: Range restrictions
          type: array
          items:
            type: string
            format: id


    Attribute:
      description: Class of Entity-value pairs
      allOf:
        - $ref: '#/components/schemas/Classifier'
      properties:
        domain:
          description: Domain restriction
          type: array
          items:
            type: string
            format: id
        range:
          $ref: '#/components/schemas/AttributeRange'

    AttributeRange:
      type: string
      enum:
          - STRING
          - TEXT
          - INTEGER
          - DOUBLE
      default: STRING

    Entity:
      description: Individual entity
      allOf:
        - $ref: '#/components/schemas/KnowledgeElement'
      type: object


    Statement:
      description: Knowledge statement
      allOf:
        - $ref: '#/components/schemas/KnowledgeElement'
      type: object
      properties:
        subject:
          description: Subject id
          type: string
          format: id
        predicate:
          description: Ontology relation or attribute
          type: string
          format: id
        value:
          description: Object entity id or attribute value
          type: string
          format: utf-8
        provenance:
          type: string
        support:
          type: number
          format: double
          minimum: 0.0
          maximum: 1.0

    Frame:
      description: Conceptual pattern, e.g. a query or a form
      allOf:
        - $ref: '#/components/schemas/KnowledgeElement'
      type: object
      properties:
        conceptualSlots:
          description: Conceptual elements
          type: array
          items:
             $ref: '#/components/schemas/ConceptualSlot'
        relationalSlots:
          description: Relational elements
          type: array
          items:
            $ref: '#/components/schemas/RelationalSlot'
        attributiveSlots:
          description: Attributive elements
          type: array
          items:
            $ref: '#/components/schemas/AttributiveSlot'


    Slot:
      description: Framed conceptual element
      allOf:
        - $ref: '#/components/schemas/KnowledgeElement'
      type: object
      properties:
        reference:
          description: Conceptual element
          type: string
          format: id
        required:
          description: Tells if the slot should be instantiated in order for the frame to be processed
          type: boolean
          default: true
      discriminator:
        propertyName: ktype
        mapping:
          CONCEPTUALSLOT:  '#/components/schemas/ConceptualSlot'
          RELATIONALSLOT:  '#/components/schemas/RelationalSlot'
          ATTRIBUTIVESLOT: '#/components/schemas/AttributiveSlot'

    ConceptualSlot:
      description: A slot bound to a concept
      allOf:
        - $ref: '#/components/schemas/Slot'
      properties:

       individual:
         description: True if references an entity, false (default) if references a concept
         type: boolean
         default: false
       constraints:
         description: Constraint concepts
         type: array
         items:
           type: string
           format: id
       root:
         description: Distinguished root slot
         type: boolean
         default: false

    RelationalSlot:
      description: A slot bound to a relation (property)
      allOf:
        - $ref: '#/components/schemas/Slot'
      required:
        - subjectBinding
      type: object
      properties:
        subjectBinding:
          description: Slot's subject binding
          type: string
          format: id
        objectBinding:
          description: Slot's object binding
          type: string
          format: id
        subjectConstraints :
          description: Domain constraints
          type: array
          items:
            type: string
            format: id
        objectConstraints:
          description: Range constraints
          type: array
          items:
            type: string
            format: id



    AttributiveSlot:
      allOf:
        - $ref: '#/components/schemas/Slot'
      type: object
      description: A slot bound to an Attribute (data property)
      required:
        - subjectBinding
      properties:
        subjectBinding:
          description: Slot's subject binding
          type: string
          format: id
        subjectConstraints:
          description: Domain constraints
          type: array
          items:
            type: string
            format: id
        value:
          description: Constant data value (opt)
          type: string
          format: utf-8
        comparation:
          $ref: '#/components/schemas/Comparator'


    Comparator:
      description: Comparation operator for data values (opt)
      type: string
      enum:
          - EQUAL
          - GREATER
          - SMALLER
          - SIMILAR
      default: EQUAL

    ConceptualDetails:
      description: Conceptual hierarchy details (inclusion axioms)
      type: string
      enum:
        - SUPERPREDICATES
        - SUBPREDICATES
        - DISJOINTPREDICATES
        - ALL
        - NONE
      default: NONE




