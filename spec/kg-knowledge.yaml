openapi: 3.0.2
info:
  title: Isagog Knowledge Graph Knowledge Service
  version: 1.0.0
  description: Isagog Knowledge Graph Knowledge module
  contact:
    name: Isagog Srl
    email: ks-api@isagog.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: http://api.isagog.com
    variables:
      port:
        default: '8030'
      basePath:
        default: /knowledge
tags:
  - name: KnowledgeService
    description: Ontology and reasoning functionalities

paths:

 /search:
  get:
    summary: Knowledge search
    description: Search knowledge items
    operationId: search
    parameters:
      - name: query
        in: query
        description: The query to search by
        required: true
        explode: false
        schema:
          type: string
      - name: etype
        in: query
        description: Narrow search to a specific element type
        required: false
        schema:
          type: string
          enum:
            - CONCEPT
            - PROPERTY
            - ATTRIBUTE
            - ENTITY
            - FRAME
            - ANY
          default: ANY
      - name: details
        in: query
        description: 'Details to be returned: e.g. for predicates: FULL=full hierarchy, SUMMARY=direct super\subordinates, IDENTIFIER=id only'
        required: false
        schema:
          type: string
          enum:
            - FULL
            - SUMMARY
            - IDENTIFIER
          default: IDENTIFIER
      - name: attribute
        in: query
        description: Attribute to search by, either an annotation or a data property
        required: false
        schema:
          type: string
          default: "rdfs:label"
    responses:
      200:
        description: Successful operation
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ElementRanking'
      401:
        description: No results
      402:
        description: Invalid query
      403:
        description: Invalid attribute
      501:
        description: Service unavailable
      502:
        description: Server error
      503:
        description: Missing implementation
    tags:
      - KnowledgeService


 /evaluate:
    post:
      summary: Entity evaluation
      description: Evaluates an entity as an instance of known concepts.
        Deductive evaluation should return asserted and implied entity classes.
        Abductive evaluation should return a ranking of the most plausible entity classes.
      parameters:
        - name: method
          in: query
          required: false
          schema:
            type: string
            enum:
              - DEDUCTION
              - ABDUCTION
            default: DEDUCTION
          description: Inference method to be used
          allowEmptyValue: true
      operationId: evaluateEntity
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ElementRanking'
        401:
          description: Not found
        402:
          description: Unknown graph
        403:
          description: Invalid arguments
        405:
          description: Unsupported method
        501:
          description: Service unavailable
        502:
          description: Server error
        503:
          description: Missing implementation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Entity'
        description: Entity specification
        required: true
      tags:
        - KnowledgeService

 /create:
    post:
      summary: Element creation
      description: Creates a new KnowledgeElement
      operationId: createElement
      responses:
        200:
          description: Success
        403:
          description: Invalid element
        405:
          description: Unsupported element
        501:
          description: Service unavailable
        502:
          description: Server error
        503:
          description: Missing implementation
      parameters:
        - name: overwrite
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KnowledgeElement'
        description: Element specification
        required: true
      tags:
        - KnowledgeService

 /delete:
    get:
      summary: Element deletion
      description: Deletes a KnowledgeElement
      operationId: deleteElement
      responses:
        200:
          description: Success
        401:
          description: Element not found
        402:
          description: Not authorized
        403:
          description: Invalid element
        405:
          description: Protected element
        501:
          description: Service unavailable
        502:
          description: Server error
        503:
          description: Missing implementation
      parameters:
        - name: id
          in: query
          schema:
            type: string
            format: id
      tags:
        - KnowledgeService

 /get:
    get:
      summary: Element access
      description: Returns a KnowledgeElement
      operationId: getElement
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KnowledgeElement'
        401:
          description: Element not found
        402:
          description: Not authorized
        403:
          description: Invalid element
        405:
          description: Protected element
        501:
          description: Service unavailable
        502:
          description: Server error
        503:
          description: Missing implementation
      parameters:
        - name: id
          in: query
          schema:
            type: string
            format: id
        - name: details
          in: query
          schema:
            type: string
            enum:
              - FULL
              - SUMMARY
              - NONE
            default: NONE
      tags:
        - KnowledgeService



 /frame:
    post:
      summary: Frame extraction from annotated text
      description: Extract frames from an annotated text or csv data
      parameters:
        - name: task
          in: query
          required: false
          description: Kind of analysis (RANKING = single frame ranking, SPAN = non overlapping frame spans)
          schema:
            type: string
            enum:
              - RANKING
              - SPAN
            default: SPAN
        - name: limit
          in: query
          required: false
          description: Limits the number of returned frame candidates to the supplied value
          schema:
            type: integer
            minimum: 1
            maximum: 1000
      operationId: getFrames
      responses:
        200:
          description: Frame ranking
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ElementRanking'
        201:
          description: Frame span
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FrameInstance'
        402:
          description: Insufficient data mapping
        501:
          description: Service unavailable
        502:
          description: Server error
        503:
          description: Missing implementation
      requestBody:
        content:
          application/json:
            schema:
              $ref: kg-language.yaml#/components/schemas/SentenceAnnotation
      tags:
        - KnowledgeService



components:
  schemas:
    KnowledgeGraph:
      description: Set of statements about conceptualized entities
      required:
        - id
      type: object
      properties:
        id:
          description: Knowledge Graph id
          type: string
          format: id
        sources:
          description: KG sources
          type: array
          items:
            type: string
            format: uri
        description:
          description: KG description
          type: string
        size:
          description: Statement number
          type: integer
          format: int32
        ontologies:
          description: Ontologies where concepts and relations are defined (URIs)
          type: array
          items:
            type: string
            format: uri
        context:
          description: Other graphs providing contextual knowledge
          type: array
          items:
            type: string
            format: id
        content:
          description: KG content (statements)
          type: array
          items:
            $ref: '#/components/schemas/EntityStatement'
        annotations:
          description: KG annotation (application specific)
          type: array
          items:
            type: string

    ElementRanking:
      description: Conceptual ranking record
      type: object
      required:
        - element
      properties:
        element:
          $ref: '#/components/schemas/KnowledgeElement'
        support:
          type: number
          format: double
          minimum: 0.0
          maximum: 1.0


    KnowledgeElement:
      description: Managed knowledge element (should be abstract)
      type: object
      required:
        - ktype
      properties:
        ktype:
          type: string
        linguisticNotes:
          description: Linguistic annotations
          type: array
          items:
            $ref: '#/components/schemas/LinguisticAnnotation'
      discriminator:
        propertyName: ktype
        mapping:
          CONCEPT:            '#/components/schemas/Concept'
          RELATIONALCONCEPT:  '#/components/schemas/RelationalConcept'
          ATTRIBUTIVECONCEPT: '#/components/schemas/AttributiveConcept'
          RELATION:           '#/components/schemas/Relation'
          ATTRIBUTE:          '#/components/schemas/Attribute'
          ENTITY:             '#/components/schemas/Entity'
          PREDICATESTATEMENT: '#/components/schemas/PredicateStatement'
          ENTITYSTATEMENT:    '#/components/schemas/EntityStatement'
          FRAME:              '#/components/schemas/Frame'
          FRAMEINSTANCE:      '#/components/schemas/FrameInstance'
          SLOT:               '#/components/schemas/Slot'
          SLOTINSTANCE:       '#/components/schemas/SlotInstance'



    LinguisticAnnotation:
      description: Linguistic attachment to knowledge elements
      required:
        - pos
      properties:
        pos:
          description: Part of speech
          type: string
          enum:
            - ADJ #adjective
            - ADV #adverb
            - NOUN #noun
            - NUM #numeral
            - VERB #verb
            - PHRASE

        form:
          description: Basic realization form
          type: string
        regex:
          description: Regular expression to match occurrences (opt)
          type: string

    Concept:
      description: Unary atomic classifier
      allOf:
        - $ref: '#/components/schemas/KnowledgeElement'
      type: object
      required:
        - id
        - ctype
      properties:
        id:
          type: string
          format: id
        statements:
          type: array
          items:
            $ref: '#/components/schemas/PredicateStatement'


    RelationalConcept:
      description: Unary relational classifier
      allOf:
        - $ref: '#/components/schemas/Concept'
      type: object
      required:
        - relation
        - quantifier
      properties:
        relation:
          $ref: '#/components/schemas/Relation'
        restriction:
          $ref: '#/components/schemas/Concept'
        quantifier:
          type: string
          enum:
            - SOME
            - ALL
            - ATLEAST1
            - ATMOST1

    AttributiveConcept:
      description: Unary attributive classifier
      allOf:
        - $ref: '#/components/schemas/Concept'
      type: object
      required:
        - attribute
      properties:
        attribute:
          $ref: '#/components/schemas/Attribute'
        value:
          type: string
          format: byte
        constraint:
          type: string
          enum:
            - SOME
            - ALL
            - EQUALS
            - GREATER_THAN
            - SMALLER_THAN
          default: SOME


    Relation:
      description: Class of entity pairs
      allOf:
        - $ref: '#/components/schemas/KnowledgeElement'
      required:
        - id
      properties:
        id:
          type: string
          format: id
        domain:
          $ref: '#/components/schemas/Concept'
        range:
          $ref: '#/components/schemas/Concept'


    Attribute:
      description: Class of Entity-value pairs
      allOf:
        - $ref: '#/components/schemas/KnowledgeElement'
      required:
        - id
      properties:
        id:
          type: string
          format: id
        domain:
          $ref: '#/components/schemas/Concept'
        range:
          type: string
          enum:
            - STRING
            - TEXT
            - INTEGER
            - DOUBLE
            - REFERENCE
            - TIME
            - MONEY
            - PLACE
          default: STRING


    Entity:
      description: Individual entity
      allOf:
        - $ref: '#/components/schemas/KnowledgeElement'
      type: object
      required:
        - id
      properties:
        id:
          type: string
          format: id
        statements:
          type: array
          items:
            $ref: '#/components/schemas/EntityStatement'

    Statement:
      description: Knowledge statement
      allOf:
        - $ref: '#/components/schemas/KnowledgeElement'
      type: object
      required:
        - subject
        - stype
      properties:
        stype:
          type: string
        subject:
          type: string
          format: id
        privacy:
          type: string
          enum:
            - OWNER
            - TRUSTED
            - CONTACTS
            - PUBLIC
          default: OWNER
        support:
          type: number
          format: double
          minimum: 0.0
          maximum: 1.0
      discriminator:
        propertyName: stype
        mapping:
          ENTITYSTATEMENT:    '#/components/schemas/EntityStatement'
          PREDICATESTATEMENT: '#/components/schemas/PredicateStatement'

    PredicateStatement:
      description: Statement whose subject is a predicate (conceptual assertion)
      allOf:
        - $ref: '#/components/schemas/Statement'
      type: object
      required:
        - object
        - predicate
      properties:
        object:
          type: string
          format: id
        predicate:
          type: string
          enum:
            - INCLUSION
            - DISJUNCTION
            - EQUIVALENCE


    EntityStatement:
      description: Statement whose subject is an individual (individual assertion)
      allOf:
        - $ref: '#/components/schemas/Statement'
      type: object
      required:
        - predicate
      properties:
        predicate:
          description: Ontology relation or attribute
          type: string
          format: id
        object:
          description: Ontology concept
          type: string
          format: id
        value:
          description: Attribute value
          type: string
          format: byte

    Frame:
      description: Conceptual pattern, e.g. a query or a form
      allOf:
        - $ref: '#/components/schemas/KnowledgeElement'
      type: object
      required:
        - id
        - slots
      properties:
        id:
          description: Frame identifier, must be system-wide unique
          type: string
          format: id
        slots:
          description: Conceptual elements, up to 128
          type: array
          items:
            $ref: '#/components/schemas/Slot'


    Slot:
      description: Framed conceptual element
      allOf:
        - $ref: '#/components/schemas/KnowledgeElement'
      type: object
      required:
        - fid
        - id
        - stype
      properties:
        fid:
          description: Frame id
          type: string
          format: id
        id:
          description: Slot identifier, must be frame-wide unique
          type: integer
          format: int32
          minimum: 0
          maximum: 128
        stype:
          type: string
        label:
          description: User-fiendly ientifier (opt), should be frame-wide unique
          type: string
        predicate:
          description: Ontology predicate mapping
          type: string
          format: id
      discriminator:
        propertyName: stype
        mapping:
          CONCEPTUALSLOT:  '#/components/schemas/ConceptualSlot'
          RELATIONALSLOT:  '#/components/schemas/RelationalSlot'
          ATTRIBUTIVESLOT: '#/components/schemas/AttributiveSlot'

    FrameInstance:
      description: Frame instance
      type: object
      allOf:
        - $ref: '#/components/schemas/KnowledgeElement'
      required:
        - frameType
      properties:
        id:
          description: Instance handle, should be univoque in the session
          type: integer
          format: int64
        frameType:
          description: Frame type identifier, should be system-wide unique
          type: string
          format: id
        slots:
          description: Slot values
          type: array
          items:
            $ref: '#/components/schemas/SlotInstance'
        support:
          type: number
          format: double
          minimum: 0.0
          maximum: 1.0
        provenance:
          description: The values provenance (opt)
          type: string
          enum:
            - USER_INPUT
            - KNOWLEGDE_BASE
            - DOCUMENT
            - UNDEFINED
          default: UNDEFINED


    ConceptualSlot:
      allOf:
        - $ref: '#/components/schemas/Slot'
      properties:
       features:
        type: array
        items:
          type: string
          enum:
            - DISTINGUISHED
            - INFORMATIVE
            - MANDATORY

    RelationalSlot:
      allOf:
        - $ref: '#/components/schemas/Slot'
      type: object
      properties:
        subjectBinding:
          description: Slot's subject binding, must be some slot in the same frame.
                       If the bound slot is a relational one, the binding means 'same subject as'.
          type: array
          items:
              type: integer
              minimum: 0
              maximum: 128
        objectBinding:
          description: Slot's object binding, must be some relational slot in the same frame.
                       The binding means 'same object as'.
          type: array
          items:
            type: integer
            minimum: 0
            maximum: 128
        chainBinding:
          description: Slot chaining, must be some relational slot in the same frame.
                       Chaining means that the object of the bound slot must be the subject of this slot.
          type: array
          items:
            type: integer
            minimum: 0
            maximum: 128
      required:
        - subjectBinding


    AttributiveSlot:
      allOf:
        - $ref: '#/components/schemas/Slot'
      type: object
      description: A slot bound to an Attribute (data property)
      properties:
        subjectBinding:
          description: Slot's subject binding, must be some slot in the same frame.
            If the bound slot is a relational one, the binding means 'same subject as'.
          type: array
          items:
            type: integer
            minimum: 0
            maximum: 128
        valueType:
          description: Type of the Attribute's value
          type: string
          enum:
            - STRING
            - NUMBER
            - TEXT
            - PERIOD
            - AMOUNT
            - LOCATION
            - IDENTIFIER
          default: STRING

      required:
        - subjectBinding

    SlotInstance:
      description: Slot value instance (should be abstract)
      type: object
      allOf:
        - $ref: '#/components/schemas/KnowledgeElement'
      required:
        - itype
        - slot
      properties:
        itype:
          type: string
        slot:
          $ref: '#/components/schemas/Slot'
      discriminator:
          propertyName: itype
          mapping:
            CONCEPTUALINSTANCE: '#/components/schemas/ConceptualInstance'
            RELATIONALINSTANCE: '#/components/schemas/RelationalInstance'
            ATTRIBUTIVEINSTACE: '#/components/schemas/AttributiveInstance'

    ConceptualInstance:
      type: object
      allOf:
        - $ref: '#/components/schemas/SlotInstance'
      required:
        - slot
      properties:
        slot:
          $ref: '#/components/schemas/ConceptualSlot'
        entity:
          type: string

    RelationalInstance:
      type: object
      allOf:
        - $ref: '#/components/schemas/SlotInstance'
      required:
        - slot
      properties:
        slot:
          $ref: '#/components/schemas/RelationalSlot'
        subject:
          type: string
        object:
          type: string

    AttributiveInstance:
      type: object
      allOf:
        - $ref: '#/components/schemas/SlotInstance'
      required:
        - slot
      properties:
        slot:
          $ref: '#/components/schemas/AttributiveSlot'
        subject:
          type: string
        value:
          type: string
          format: byte
        comparation:
          description: Comparation
          type: string
          enum:
            - EQUAL
            - GREATER
            - SMALLER
            - SIMILAR
          default: EQUAL