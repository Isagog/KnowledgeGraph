openapi: 3.0.2
info:
  title: Isagog Knowledge Graph Knowledge Service
  version: 1.0.0
  description: Isagog Knowledge Graph Knowledge endpoint
  contact:
    email: ks-api@isagog.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: http://localhost
    variables:
      port:
        default: 3200
      basePath:
        default: /
tags:

  - name: KnowledgeService
    description: Ontology (read-only) and inference functionalities

paths:

  /knowledge/search:
    $ref: kg-openapi.yaml#/knowledge/search

  /knowledge/evaluate:
    $ref: kg-openapi.yaml#/knowledge/evaluate

  /knowledge/create:
    $ref: kg-openapi.yaml#/knowledge/create

  /knowledge/delete:
    $ref: kg-openapi.yaml#/knowledge/delete

  /knowledge/get:
    $ref: kg-openapi.yaml#/knowledge/get

  /knowledge/frame:
    $ref: kg-openapi.yaml#/knowledge/frame



components:
  schemas:
    KnowledgeGraph:
      description: Set of statements about conceptualized entities
      required:
        - id
      type: object
      properties:
        id:
          description: Knowledge Graph id
          type: string
          format: id
        sources:
          description: KG sources
          type: array
          items:
            type: string
            format: uri
        description:
          description: KG description
          type: string
        size:
          description: Statement number
          type: integer
          format: int32
        ontologies:
          description: Ontologies where concepts and relations are defined (URIs)
          type: array
          items:
            type: string
            format: uri
        context:
          description: Other graphs providing contextual knowledge
          type: array
          items:
            type: string
            format: id
        content:
          description: KG content (statements)
          type: array
          items:
            $ref: '#/components/schemas/EntityStatement'
        annotations:
          description: KG annotation (application specific)
          type: array
          items:
            type: string

    ElementRanking:
      description: Conceptual ranking record
      type: object
      required:
        - element
      properties:
        element:
          $ref: '#/components/schemas/KnowledgeElement'
        support:
          type: number
          format: double
          minimum: 0.0
          maximum: 1.0


    KnowledgeElement:
      description: Managed knowledge element (should be abstract)
      type: object
      required:
        - ktype
      properties:
        ktype:
          type: string
        linguisticNotes:
          description: Linguistic annotations
          type: array
          items:
            $ref: '#/components/schemas/LinguisticAnnotation'
      discriminator:
        propertyName: ktype
        mapping:
          Concept: '#/components/schemas/Concept'
          RelationalConcept: '#/components/schemas/RelationalConcept'
          AttributiveConcept: '#/components/schemas/AttributiveConcept'
          Relation: '#/components/schemas/Relation'
          Attribute: '#/components/schemas/Attribute'
          Entity: '#/components/schemas/Entity'
          PredicateStatement: '#/components/schemas/PredicateStatement'
          EntityStatement: '#/components/schemas/EntityStatement'
          Frame: '#/components/schemas/Frame'
          FrameInstance: '#/components/schemas/FrameInstance'
          Slot: '#/components/schemas/Slot'
          SlotInstance: '#/components/schemas/SlotInstance'



    LinguisticAnnotation:
      description: Linguistic attachment to knowledge elements
      required:
        - pos
      properties:
        pos:
          description: Part of speech
          type: string
          enum:
            - ADJ #adjective
            - ADV #adverb
            - NOUN #noun
            - NUM #numeral
            - VERB #verb
            - PHRASE

        form:
          description: Basic realization form
          type: string
        regex:
          description: Regular expression to match occurrences (opt)
          type: string

    Concept:
      description: Unary atomic classifier
      allOf:
        - $ref: '#/components/schemas/KnowledgeElement'
      type: object
      required:
        - id
        - ctype
      properties:
        id:
          type: string
          format: id
        statements:
          type: array
          items:
            $ref: '#/components/schemas/PredicateStatement'


    RelationalConcept:
      description: Unary relational classifier
      allOf:
        - $ref: '#/components/schemas/Concept'
      type: object
      required:
        - relation
        - quantifier
      properties:
        relation:
          $ref: '#/components/schemas/Relation'
        restriction:
          $ref: '#/components/schemas/Concept'
        quantifier:
          type: string
          enum:
            - SOME
            - ALL
            - ATLEAST1
            - ATMOST1

    AttributiveConcept:
      description: Unary attributive classifier
      allOf:
        - $ref: '#/components/schemas/Concept'
      type: object
      required:
        - attribute
      properties:
        attribute:
          $ref: '#/components/schemas/Attribute'
        value:
          type: string
          format: byte
        constraint:
          type: string
          enum:
            - SOME
            - ALL
            - EQUALS
            - GREATER_THAN
            - SMALLER_THAN
          default: SOME


    Relation:
      description: Class of entity pairs
      allOf:
        - $ref: '#/components/schemas/KnowledgeElement'
      required:
        - id
      properties:
        id:
          type: string
          format: id
        domain:
          $ref: '#/components/schemas/Concept'
        range:
          $ref: '#/components/schemas/Concept'


    Attribute:
      description: Class of Entity-value pairs
      allOf:
        - $ref: '#/components/schemas/KnowledgeElement'
      required:
        - id
      properties:
        id:
          type: string
          format: id
        domain:
          $ref: '#/components/schemas/Concept'
        range:
          type: string
          enum:
            - STRING
            - TEXT
            - INTEGER
            - DOUBLE
            - REFERENCE
            - TIME
            - MONEY
            - PLACE
          default: STRING


    Entity:
      description: Individual entity
      allOf:
        - $ref: '#/components/schemas/KnowledgeElement'
      type: object
      required:
        - id
      properties:
        id:
          type: string
          format: id
        statements:
          type: array
          items:
            $ref: '#/components/schemas/EntityStatement'

    Statement:
      description: Knowledge statement
      allOf:
        - $ref: '#/components/schemas/KnowledgeElement'
      type: object
      required:
        - subject
        - stype
      properties:
        stype:
          type: string
        subject:
          type: string
          format: id
        privacy:
          type: string
          enum:
            - OWNER
            - TRUSTED
            - CONTACTS
            - PUBLIC
          default: OWNER
        support:
          type: number
          format: double
          minimum: 0.0
          maximum: 1.0
      discriminator:
        propertyName: stype
        mapping:
          EntityStatement: '#/components/schemas/EntityStatement'
          PredicateStatement: '#/components/schemas/PredicateStatement'

    PredicateStatement:
      description: Statement whose subject is a predicate (conceptual assertion)
      allOf:
        - $ref: '#/components/schemas/Statement'
      type: object
      required:
        - object
        - predicate
      properties:
        object:
          type: string
          format: id
        predicate:
          type: string
          enum:
            - INCLUSION
            - DISJUNCTION
            - EQUIVALENCE


    EntityStatement:
      description: Statement whose subject is an individual (individual assertion)
      allOf:
        - $ref: '#/components/schemas/Statement'
      type: object
      required:
        - predicate
      properties:
        predicate:
          description: Ontology relation or attribute
          type: string
          format: id
        object:
          description: Ontology concept
          type: string
          format: id
        value:
          description: Attribute value
          type: string
          format: byte

    Frame:
      description: Conceptual pattern, e.g. a query or a form
      allOf:
        - $ref: '#/components/schemas/KnowledgeElement'
      type: object
      required:
        - id
        - slots
      properties:
        id:
          description: Frame identifier, must be system-wide unique
          type: string
          format: id
        slots:
          description: Conceptual elements, up to 128
          type: array
          items:
            $ref: '#/components/schemas/Slot'


    Slot:
      description: Framed conceptual element
      allOf:
        - $ref: '#/components/schemas/KnowledgeElement'
      type: object
      required:
        - fid
        - id
        - stype
      properties:
        fid:
          description: Frame id
          type: string
          format: id
        id:
          description: Slot identifier, must be frame-wide unique
          type: integer
          format: int32
          minimum: 0
          maximum: 128
        stype:
          type: string
        label:
          description: User-fiendly ientifier (opt), should be frame-wide unique
          type: string
        predicate:
          description: Ontology predicate mapping
          type: string
          format: id
      discriminator:
        propertyName: stype
        mapping:
          ConceptualSlot: '#/components/schemas/ConceptualSlot'
          RelationalSlot: '#/components/schemas/RelationalSlot'
          AttributiveSlot: '#/components/schemas/AttributiveSlot'

    FrameInstance:
      description: Frame instance
      type: object
      allOf:
        - $ref: '#/components/schemas/KnowledgeElement'
      required:
        - frameType
      properties:
        id:
          description: Instance handle, should be univoque in the session
          type: integer
          format: int64
        frameType:
          description: Frame type identifier, should be system-wide unique
          type: string
          format: id
        slots:
          description: Slot values
          type: array
          items:
            $ref: '#/components/schemas/SlotInstance'
        support:
          type: number
          format: double
          minimum: 0.0
          maximum: 1.0
        provenance:
          description: The values provenance (opt)
          type: string
          enum:
            - USER_INPUT
            - KNOWLEGDE_BASE
            - DOCUMENT
            - UNDEFINED
          default: UNDEFINED


    ConceptualSlot:
      allOf:
        - $ref: '#/components/schemas/Slot'
      properties:
       features:
        type: array
        items:
          type: string
          enum:
            - DISTINGUISHED
            - INFORMATIVE
            - MANDATORY

    RelationalSlot:
      allOf:
        - $ref: '#/components/schemas/Slot'
      type: object
      properties:
        subjectBinding:
          description: Slot's subject binding, must be some slot in the same frame.
                       If the bound slot is a relational one, the binding means 'same subject as'.
          type: array
          items:
              type: integer
              minimum: 0
              maximum: 128
        objectBinding:
          description: Slot's object binding, must be some relational slot in the same frame.
                       The binding means 'same object as'.
          type: array
          items:
            type: integer
            minimum: 0
            maximum: 128
        chainBinding:
          description: Slot chaining, must be some relational slot in the same frame.
                       Chaining means that the object of the bound slot must be the subject of this slot.
          type: array
          items:
            type: integer
            minimum: 0
            maximum: 128
      required:
        - subjectBinding


    AttributiveSlot:
      allOf:
        - $ref: '#/components/schemas/Slot'
      type: object
      description: A slot bound to an Attribute (data property)
      properties:
        subjectBinding:
          description: Slot's subject binding, must be some slot in the same frame.
            If the bound slot is a relational one, the binding means 'same subject as'.
          type: array
          items:
            type: integer
            minimum: 0
            maximum: 128
        valueType:
          description: Type of the Attribute's value
          type: string
          enum:
            - STRING
            - NUMBER
            - TEXT
            - PERIOD
            - AMOUNT
            - LOCATION
            - IDENTIFIER
          default: STRING

      required:
        - subjectBinding

    SlotInstance:
      description: Slot value instance (should be abstract)
      type: object
      allOf:
        - $ref: '#/components/schemas/KnowledgeElement'
      required:
        - itype
        - slot
      properties:
        itype:
          type: string
        slot:
          $ref: '#/components/schemas/Slot'
      discriminator:
          propertyName: itype
          mapping:
            ConceptualInstance: '#/components/schemas/ConceptualInstance'
            RelationalInstance: '#/components/schemas/RelationalInstance'
            AttributiveInstace: '#/components/schemas/AttributiveInstance'

    ConceptualInstance:
      type: object
      allOf:
        - $ref: '#/components/schemas/SlotInstance'
      required:
        - slot
      properties:
        slot:
          $ref: '#/components/schemas/ConceptualSlot'
        entity:
          type: string

    RelationalInstance:
      type: object
      allOf:
        - $ref: '#/components/schemas/SlotInstance'
      required:
        - slot
      properties:
        slot:
          $ref: '#/components/schemas/RelationalSlot'
        subject:
          type: string
        object:
          type: string

    AttributiveInstance:
      type: object
      allOf:
        - $ref: '#/components/schemas/SlotInstance'
      required:
        - slot
      properties:
        slot:
          $ref: '#/components/schemas/AttributiveSlot'
        subject:
          type: string
        value:
          type: string
          format: byte
        comparation:
          description: Comparation
          type: string
          enum:
            - EQUAL
            - GREATER
            - SMALLER
            - SIMILAR
          default: EQUAL