openapi: 3.0.2
info:
  title: Isagog Knowledge Graph Knowledge Service
  version: 1.0.0
  description: Isagog Knowledge Graph Knowledge module
  contact:
    name: Isagog Srl
    email: ks-api@isagog.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: http://api.isagog.com
    variables:
      port:
        default: '8030'
      basePath:
        default: /knowledge
tags:
  - name: KnowledgeService
    description: Ontology and reasoning functionalities (read-only)

paths:
  /concepts:
    summary: Represents the atomic concepts of the Knowledge Graph ontology
    description: >
      This resource represents an individual concept in the Knowledge Graph T-BOX.
    get:
      summary: Get all the atomic concepts in the Knowledge Graph
      description: Get all the atomic concepts in the Knowledge Graph
      operationId: getAllConcepts
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Concept'
        401:
          description: No results
        402:
          description: Invalid query
        403:
          description: Invalid attribute
        501:
          description: Service unavailable
        502:
          description: Server error
        503:
          description: Missing implementation
      tags:
      - KnowledgeService

  /relations:
    get:
      summary: Gets all the relations in the Knowledge Graph ontology
      description: Gets a relation
      operationId: getAllRelations
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Relation'
        401:
          description: No results
        402:
          description: Invalid query
        403:
          description: Invalid attribute
        501:
          description: Service unavailable
        502:
          description: Server error
        503:
          description: Missing implementation
      tags:
        - KnowledgeService
        
  /attributes:
    get:
      summary: Gets all attributes in the Knowledge Graph ontology
      description: Gets an attirbute
      operationId: getAllAttributes
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Attribute'
        401:
          description: No results
        402:
          description: Invalid query
        403:
          description: Invalid attribute
        501:
          description: Service unavailable
        502:
          description: Server error
        503:
          description: Missing implementation
      tags:
        - KnowledgeService    
        
  /frames:
    get:
      summary: Gets all the frames in the Knowledge Graph ontology
      description: Gets a frame
      operationId: getAllFrames
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Frame'
        401:
          description: No results
        402:
          description: Invalid query
        403:
          description: Invalid attribute
        501:
          description: Service unavailable
        502:
          description: Server error
        503:
          description: Missing implementation
      tags:
        - KnowledgeService
        
  /concepts/{id}:
    summary: Gets a concept
    description: >
      This resource represents an individual concept in the Knowledge Graph ontology. Each concept is identified by a unique string `id`.
    get:
      summary: Gets a concept
      description: Gets a concept
      operationId: getConcept
      parameters:
        - name: id
          in: path
          description: The concept's id
          required: true
          schema:
            type: string
            format: id
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Concept'
        401:
          description: No results
        402:
          description: Invalid query
        403:
          description: Invalid attribute
        501:
          description: Service unavailable
        502:
          description: Server error
        503:
          description: Missing implementation
      tags:
        - KnowledgeService
        
  /relations/{id}:
    get:
      summary: Gets a relation
      description: Gets a relation
      operationId: getRelation
      parameters:
        - name: id
          in: path
          required: true
          description: The relation's id
          schema:
            type: string
            format: id
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                 $ref: '#/components/schemas/Relation'
        401:
          description: No results
        402:
          description: Invalid query
        403:
          description: Invalid attribute
        501:
          description: Service unavailable
        502:
          description: Server error
        503:
          description: Missing implementation
      tags:
        - KnowledgeService
        
  /attributes/{id}:
      get:
        summary: Gets an attribute
        description: Gets an attirbute
        operationId: getAttribute
        parameters:
          - name: id
            in: path
            required: true
            description: The attribute's id
            schema:
              type: string
              format: id
        responses:
          200:
            description: Successful operation
            content:
              application/json:
                schema:
                   $ref: '#/components/schemas/Attribute'
          401:
            description: No results
          402:
            description: Invalid query
          403:
            description: Invalid attribute
          501:
            description: Service unavailable
          502:
            description: Server error
          503:
            description: Missing implementation
        tags:
          - KnowledgeService
          

    
  /frames/{id}:
    get:
      summary: Gets a frame
      description: Gets a frame
      operationId: getFrame
      parameters:
        - name: id
          in: path
          required: true
          description: The frame's id
          schema:
            type: string
            format: id
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                 $ref: '#/components/schemas/Frame'
        401:
          description: No results
        402:
          description: Invalid query
        403:
          description: Invalid attribute
        501:
          description: Service unavailable
        502:
          description: Server error
        503:
          description: Missing implementation
      tags:
        - KnowledgeService
        
  /frames/extract:
    post:
      summary: Frame extraction from sentences
      description: Extract frames from an annotated sentence
      parameters:
        - name: limit
          in: query
          required: false
          description: Limits the number of returned frame candidates to the supplied value
          schema:
            type: integer
            minimum: 1
            maximum: 100
      operationId: extractFrames
      responses:
        200:
          description: Frame span
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Frame'
        402:
          description: Insufficient data mapping
        501:
          description: Service unavailable
        502:
          description: Server error
        503:
          description: Missing implementation
      requestBody:
        content:
          application/json:
            schema:
              $ref: kg-language.yaml#/components/schemas/SentenceAnnotation
      tags:
        - KnowledgeService

  /search:
   get:
    summary: Knowledge search
    description: Search knowledge items
    operationId: search
    parameters:
      - name: query
        in: query
        description: The query to search by
        required: true
        schema:
          type: string
      - name: etype
        in: query
        description: Narrow search to a specific element type
        required: false
        schema:
          type: string
          enum:
            - CONCEPT
            - PROPERTY
            - ATTRIBUTE
            - ENTITY
            - FRAME
            - ANY
          default: ANY
      - name: details
        in: query
        description: 'Details to be returned: e.g. for predicates: FULL=full hierarchy, SUMMARY=direct super\subordinates, IDENTIFIER=id only'
        required: false
        schema:
          type: string
          enum:
            - FULL
            - SUMMARY
            - IDENTIFIER
          default: IDENTIFIER
      - name: attribute
        in: query
        description: Attribute to search by, either an annotation or a data property
        required: false
        schema:
          type: string
          default: "rdfs:label"
    responses:
      200:
        description: Successful operation
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ElementRanking'
      401:
        description: No results
      402:
        description: Invalid query
      403:
        description: Invalid attribute
      501:
        description: Service unavailable
      502:
        description: Server error
      503:
        description: Missing implementation
    tags:
      - KnowledgeService


  /evaluate:
    post:
      summary: Entity evaluation
      description: Evaluates an entity as an instance of known concepts.
        Deductive evaluation should return asserted and implied entity classes.
        Abductive evaluation should return a ranking of the most plausible entity classes.
      parameters:
        - name: method
          in: query
          required: false
          schema:
            type: string
            enum:
              - DEDUCTION
              - ABDUCTION
            default: DEDUCTION
          description: Inference method to be used
          allowEmptyValue: true
      operationId: evaluateEntity
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ElementRanking'
        401:
          description: Not found
        402:
          description: Unknown graph
        403:
          description: Invalid arguments
        405:
          description: Unsupported method
        501:
          description: Service unavailable
        502:
          description: Server error
        503:
          description: Missing implementation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Entity'
        description: Entity specification
        required: true
      tags:
        - KnowledgeService

components:
  schemas:

    ElementRanking:
      description: Ranking record
      type: object
      required:
        - element
      properties:
        element:
           $ref: '#/components/schemas/KnowledgeElement'
        support:
          type: number
          format: double
          minimum: 0.0
          maximum: 1.0

    KnowledgeElement:
      description: Managed knowledge element (should be abstract)
      type: object
      required:
        - ktype
      properties:
        ktype:
          description: Knowledge element type
          type: string
        annotations:
          description: Knowledge annotations
          type: array
          items:
            $ref: '#/components/schemas/KnowledgeAnnotation'
      discriminator:
        propertyName: ktype
        mapping:
          Concept:             '#/components/schemas/Concept'
          Relation:            '#/components/schemas/Relation'
          Attribute:           '#/components/schemas/Attribute'
          Entity:              '#/components/schemas/Entity'
          PredicateStatement:  '#/components/schemas/PredicateStatement'
          EntityStatement:     '#/components/schemas/EntityStatement'
          Frame:               '#/components/schemas/Frame'
          ConceptualSlot:      '#/components/schemas/ConceptualSlot'
          RelationalSlot:      '#/components/schemas/RelationalSlot'
          AttributiveSlot:     '#/components/schemas/AttributiveSlot'



    KnowledgeAnnotation:
      description: Base class for knowledge annotations
      required:
        - atype
      properties:
        atype:
          description: Annotation type
          type: string
        label:
          description: Annotation label (opt)
          type: string
      discriminator:
        propertyName: atype
        mapping:
          LinguisticAnnotation:  '#/components/schemas/LinguisticAnnotation'
          MetaclassAnnotation:   '#/components/schemas/MetaclassAnnotation'
          InformativeAnnotation: '#/components/schemas/InformativeAnnotation'


    LinguisticAnnotation:
      description: Linguistic attachment to knowledge elements
      allOf:
        - $ref: '#/components/schemas/KnowledgeAnnotation'
      required:
        - lang
        - form
      properties:
        lang:
          type: string
          enum:
            - en
            - es
            - de
            - fr
            - it

        pos:
          description: Part of speech (opt)
          type: string
          enum:
            - ADJ #adjective
            - ADV #adverb
            - NOUN #noun
            - PRON #pronoun
            - PROPN #proper noun
            - NUM #numeral
            - VERB #verb
            - NP #noun phrase
            - VP #verb phrase
            - X #other
        form:
          description: Linguistic rendering (base form)
          type: string
        regex:
          description: Regular expression to match occurrences (opt)
          type: string

    MetaclassAnnotation:
      description: Metaclass annotation
      allOf:
        - $ref: '#/components/schemas/KnowledgeAnnotation'
      required:
        - label

    InformativeAnnotation:
      description: Informative annotation
      allOf:
        - $ref: '#/components/schemas/KnowledgeAnnotation'
      required:
        - label

    Concept:
      description: Unary classifier
      allOf:
        - $ref: '#/components/schemas/KnowledgeElement'
      type: object
      required:
        - id
      properties:
        id:
          description: Concept identifier (uri)
          type: string
          format: id
        statements:
          type: array
          items:
            $ref: '#/components/schemas/PredicateStatement'


    RelationalConcept:
      description: Unary relational classifier
      allOf:
        - $ref: '#/components/schemas/Concept'
      type: object
      required:
        - relation
        - quantifier
      properties:
        relation:
          description: Relation identifier
          type: string
          format: id
        restriction:
          description: Restriction identifier
          type: string
          format: id
        quantifier:
          type: string
          enum:
            - SOME
            - ALL
            - ATLEAST1
            - ATMOST1

    AttributiveConcept:
      description: Unary attributive classifier
      allOf:
        - $ref: '#/components/schemas/Concept'
      type: object
      required:
        - attribute
      properties:
        attribute:
          type: string
          format: id
        value:
          type: string
          format: byte
        constraint:
          type: string
          enum:
            - EQUAL
            - GREATER_THAN
            - SMALLER_THAN
            - SIMILAR
          default: EQUAL


    Relation:
      description: Class of entity pairs
      allOf:
        - $ref: '#/components/schemas/KnowledgeElement'
      required:
        - id
      properties:
        id:
          type: string
          format: id
        domain:
          description: Domain restriction
          type: string
          format: id
        range:
          description: Range restriction
          type: string
          format: id


    Attribute:
      description: Class of Entity-value pairs
      allOf:
        - $ref: '#/components/schemas/KnowledgeElement'
      required:
        - id
      properties:
        id:
          type: string
          format: id
        domain:
          description: Domain restriction
          type: string
          format: id
        range:
          type: string
          enum:
            - STRING
            - TEXT
            - INTEGER
            - DOUBLE
          default: STRING


    Entity:
      description: Individual entity
      allOf:
        - $ref: '#/components/schemas/KnowledgeElement'
      type: object
      required:
        - id
      properties:
        id:
          type: string
          format: id

    Statement:
      description: Knowledge statement
      allOf:
        - $ref: '#/components/schemas/KnowledgeElement'
      type: object
      required:
        - stype
      properties:
        subject:
          description: The predicate's subject id, may be omitted when the statement is contained in a structure
          type: string
          format: id
        privacy:
          type: string
          enum:
            - OWNER
            - TRUSTED
            - CONTACTS
            - PUBLIC
          default: OWNER
        support:
          type: number
          format: double
          minimum: 0.0
          maximum: 1.0
      discriminator:
        propertyName: ktype
        mapping:
          EntityStatement:    '#/components/schemas/EntityStatement'
          PredicateStatement: '#/components/schemas/PredicateStatement'

    PredicateStatement:
      description: Statement whose subject is a predicate
      allOf:
        - $ref: '#/components/schemas/Statement'
      type: object
      required:
        - object
        - predicate
      properties:
        object:
          type: string
          format: id
        predicate:
          type: string
          enum:
            - INCLUSION
            - DISJUNCTION
            - EQUIVALENCE


    EntityStatement:
      description: Statement whose subject is an individual (individual assertion)
      allOf:
        - $ref: '#/components/schemas/Statement'
      type: object
      required:
        - predicate
        - object
      properties:
        predicate:
          description: Ontology relation or attribute
          type: string
          format: id
        relational:
          type: boolean
          default: false
        object:
          description: Statement's object, i.e. an id or a value
          type: string
          format: utf8

    Frame:
      description: Conceptual pattern, e.g. a query or a form
      allOf:
        - $ref: '#/components/schemas/KnowledgeElement'
      type: object
      required:
        - id
        - slots
      properties:
        id:
          description: Frame identifier
          type: string
          format: id
        conceptualSlots:
          description: Conceptual elements, up to 128
          type: array
          items:
             $ref: '#/components/schemas/ConceptualSlot'
        relationalSlots:
          description: Relational elements, up to 128
          type: array
          items:
            $ref: '#/components/schemas/RelationalSlot'
        attributiveSlots:
          description: Attributive elements, up to 128
          type: array
          items:
            $ref: '#/components/schemas/AttributiveSlot'
        valueSlots:
          description: Value elements, up to 128
          type: array
          items:
            $ref: '#/components/schemas/ValueSlot'

    Slot:
      description: Framed conceptual element
      allOf:
        - $ref: '#/components/schemas/KnowledgeElement'
      type: object
      required:
        - id
      properties:
        id:
          description: Slot identifier, must be frame-unique
          type: integer
          format: int32
          minimum: 0
          maximum: 128
        name:
          description: Slot pretty name (opt)
          type: string
        predicate:
          description: Predicate identifier, should be a valid id in a known ontology
          type: string
          format: id
        required:
          description: Tells if the slot must be instantiated in order for the frame to make sense
          type: boolean
          default: false
        informative:
          description: Tells whether slot's values contribute to frame's meaning
          type: boolean
          default: false
      discriminator:
        propertyName: ktype
        mapping:
          ConceptualSlot:  '#/components/schemas/ConceptualSlot'
          RelationalSlot:  '#/components/schemas/RelationalSlot'
          AttributiveSlot: '#/components/schemas/AttributiveSlot'
          ValueSlot:       '#/components/schemas/ValueSlot'

    ConceptualSlot:
      description: A slot boud to a concept
      allOf:
        - $ref: '#/components/schemas/Slot'
      properties:
       value:
        description: Constant Entity reference (opt)
        type: string
        format: id


    RelationalSlot:
      description: A slot bound to a relation (property)
      allOf:
        - $ref: '#/components/schemas/Slot'
      type: object
      properties:
        subjectBinding:
          description: Slot's subject binding, must be a ConceptualSlot in the same frame.
          type: integer
          minimum: 0
          maximum: 128
        objectBinding:
          description: Slot's object binding, must be a ConceptualSlot in the same frame.
          type: integer
          minimum: 0
          maximum: 128
      required:
        - subjectBinding
        - objectBinding


    AttributiveSlot:
      allOf:
        - $ref: '#/components/schemas/Slot'
      type: object
      description: A slot bound to an Attribute (data property)
      properties:
        subjectBinding:
          description: Slot's subject binding, must be a ConceptualSlot in the same frame.
          type: integer
          minimum: 0
          maximum: 128
        objectBinding:
          description: Slot's object binding, must be a ValueSlot in the same frame.
          type: integer
          minimum: 0
          maximum: 128
        comparation:
          description: Comparation operator for data values (opt)
          type: string
          enum:
           - EQUAL
           - GREATER
           - SMALLER
           - SIMILAR
          default: EQUAL
      required:
        - subjectBinding
        - objectBinding

    ValueSlot:
      allOf:
        - $ref: '#/components/schemas/Slot'
      type: object
      description: A slot bound to a data item
      properties:
          value:
            description: Constant data value (opt)
            type: string
            format: utf8

#    FrameInstance:
#      description: Frame instance
#      type: object
#      allOf:
#        - $ref: '#/components/schemas/KnowledgeElement'
#      required:
#        - frameType
#      properties:
#        id:
#          description: Instance handle, should be univoque in the session
#          type: integer
#          format: int64
#        frameType:
#          description: Frame type identifier, should be system-wide unique
#          type: string
#          format: id
#        slots:
#          description: Slot values
#          type: array
#          items:
#            $ref: '#/components/schemas/SlotInstance'
#        support:
#          type: number
#          format: double
#          minimum: 0.0
#          maximum: 1.0
#        provenance:
#          description: The values provenance (opt)
#          type: string
#          enum:
#            - USER_INPUT
#            - KNOWLEGDE_BASE
#            - DOCUMENT
#            - UNDEFINED
#          default: UNDEFINED


#    SlotInstance:
#      description: Slot value instance (should be abstract)
#      type: object
#      allOf:
#        - $ref: '#/components/schemas/KnowledgeElement'
#      required:
#        - itype
#        - slot
#        - value
#      properties:
#        itype:
#          type: string
#          enum:
#            - ENTITYVARIABLE
#            - ENTITY
#            - VALUEVARIABLE
#            - VALUE
#        slot:
#          $ref: '#/components/schemas/SlotReference'
#        value:
#          type: string
#          format: utf8
#        comparation:
#          description: Comparation operator for data values
#          type: string
#          enum:
#            - EQUAL
#            - GREATER
#            - SMALLER
#            - SIMILAR
#          default: EQUAL
#

    SlotReference:
      description: Reference to a frame slot
      type: object
      required:
        - frameid
        - slotid
      properties:
        frameid:
          type: string
          format: id
        slotid:
          type: integer
          minimum: 0
          maximum: 128

