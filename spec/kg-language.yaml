openapi: 3.0.2
info:
  title: Isagog Knowledge Graph Language Service
  version: 1.0.0
  description: Isagog Knowledge Graph Language module
  contact:
    name: Isagog Srl
    email: ks-api@isagog.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: http://localhost:8030
    variables:
      port:
        default: '8030'
      basePath:
        default: /language

tags:
  - name: LinguisticService
    description: NLP analitic functionalities

paths:

  /sentence/analyze:
    post:
      summary: Sentence analysis
      description: Provides an annotation of the supplied sentence
      parameters:
        - name: tasks
          description: Tasks to be executed
          in: query
          required: true
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Task'

      operationId: sentenceAnalysis
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnnotatedSentence'

        401:
          description: Unknown graph
        402:
          description: Invalid sentence
        403:
          description: Unsupported task
        501:
          description: Service unavailable
        502:
          description: Server error
        503:
          description: Missing implementation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Sentence'
      tags:
        - LinguisticService

  /document/analyze:
    post:
      summary: Document analysis
      description: Extract and analyze sentences from a document
      parameters:
        - name: tasks
          description: Tasks to be executed
          in: query
          required: true
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Task'

      operationId: documentAnalysis
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                 $ref: '#/components/schemas/AnnotatedDocument'
        401:
          description: Unknown graph
        402:
          description: Invalid document
        403:
          description: Unsupported task
        501:
          description: Service unavailable
        502:
          description: Server error
        503:
          description: Missing implementation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Document'
      tags:
        - LinguisticService

components:
  schemas:


    Task:
      description: NLP Tasks
      type: string
      enum:
          - TOKENIZATION
          - LEMMATIZATION
          - ENTITY_EXTRACTION
          - RELATION_ANALYSIS
          - KEYWORD_EXTRACTION
          - SENTENCE_EXTRACTION
          - DOCUMENT_SUMMARY
          - SENTENCE_CLASSIFICATION
          - DOCUMENT_CLASSIFICATION
    Sentence:
      description: Complete word sequence
      type: object
      required:
        - stype
        - verbatim
      properties:
        stype:
          description: Sentence type
          type: string
        lang:
          description: Sentence language (ISO 639-1)
          type: string
          minLength: 2
          maxLength: 2
        verbatim:
          description: Textual content
          type: string
          format: utf-8
        context:
          description: Textual context (opt)
          type: string
          format: utf-8

      discriminator:
        propertyName: stype
        mapping:
          Sentence: '#/components/schemas/Sentence'
          AnnotatedSentence:  '#/components/schemas/AnnotatedSentence'


    Classification:
        description: Text general classification (e.g. intent or sentiment)
        type: object
        required:
          - classifier
        properties:
          classifier:
            type: string
          support:
            type: number
            format: double
            minimum: 0.0
            maximum: 1.0


    AnnotatedDocument:
      description: Document annotation
      type: object
      allOf:
        - $ref: '#/components/schemas/Document'
      properties:
        classes:
          description: Text classification
          type: array
          items:
            $ref: '#/components/schemas/Classification'
        sentences:
          type: array
          items:
            $ref: '#/components/schemas/AnnotatedSentence'


    AnnotatedSentence:
        description: Text annotation
        type: object
        allOf:
          - $ref: '#/components/schemas/Sentence'
        properties:
          classes:
            description: Text classification
            type: array
            items:
              $ref: '#/components/schemas/Classification'
          tokens:
            description: Basic token annotation
            type: array
            items:
              $ref: '#/components/schemas/LemmaAnnotation'
          entities:
            description: Entity annotation
            type: array
            items:
              $ref: '#/components/schemas/EntityAnnotation'
          keywords:
            description: Keyword annotation
            type: array
            items:
              $ref: '#/components/schemas/KeywordAnnotation'
          dependencies:
            description: Dependencies
            type: array
            items:
              $ref: '#/components/schemas/DependencyAnnotation'


    TokenAnnotation:
      description: Base class for token annotations, should be abstract
      type: object
      required:
        - ttype
        - token
        - offset
      properties:
        ttype:
          description: Token type
          type: string
        token:
          type: string
        offset:
          description: Head character offset
          type: integer
          format: int32
          minimum: 0
        support:
          type: number
          format: double
      discriminator:
          propertyName: ttype
          mapping:
            LemmaAnnotation:  '#/components/schemas/LemmaAnnotation'
            EntityAnnotation: '#/components/schemas/EntityAnnotation'
            KeywordAnnotation: '#/components/schemas/KeywordAnnotation'
            DependencyAnnotation: '#/components/schemas/DependencyAnnotation'

    PartOfSpeech:
      description: Part of speech
      type: string
      enum:
        - ADJ #adjective
        - ADP #adposition
        - ADV #adverb
        - AUX #auxiliary
        - CCONJ #coordinating conjunction
        - DET #determiner
        - INTJ #interjection
        - NOUN #noun
        - NUM #numeral
        - PART #particle
        - PRON #pronoun
        - PROPN #proper noun
        - PUNCT #punctuation
        - SCONJ #subordinating conjunction
        - SYM #symbol
        - VERB #verb
        - X #other

    SyntacticDependency:
      description: Dependendency tag (Universal Dependencies)
      type: string
      enum:
        - ACL            # clausal modifier of noun (adjectival clause)
        - ADVCL        # adverbial clause modifier
        - ADVMOD        # adverbial modifier
        - AMOD        # adjectival modifier
        - APPOS        # appositional modifier
        - AUX            # auxiliary
        - CASE        # case marking
        - CC            # coordinating conjunction
        - CCOMP        # clausal complement
        - CLF            # classifier
        - COMPOUND    # compound
        - CONJ        # conjunct
        - COP            # copula
        - CSUBJ        # clausal subject
        - DEP            # unspecified dependency
        - DET            # determiner
        - DISCOURSE   # discourse element
        - DISLOCATED    # dislocated elements
        - EXPL        # expletive
        - FIXED        # fixed multiword expression
        - FLAT        # flat multiword expression
        - GOESWITH    # goes with
        - IOBJ        # indirect object
        - LIST        # list
        - MARK        # marker
        - NMOD        # nominal modifier
        - NSUBJ        # nominal subject
        - NUMMOD        # numeric modifier
        - OBJ        # object
        - OBL            # oblique nominal
        - ORPHAN        # orphan
        - PARATAXIS    # parataxis
        - PUNCT        # punctuation
        - REPARANDUM    # overridden disfluency
        - ROOT        # root
        - VOCATIVE    # vocative
        - XCOMP        # open clausal complement
        - OTHER

    LemmaAnnotation:
        description: Pos and lemma annotation
        type: object
        required:
          - pos
          - lemma
        allOf:
          - $ref: '#/components/schemas/TokenAnnotation'
        properties:
          pos:
            $ref: '#/components/schemas/PartOfSpeech'
          features:
            description: Grammatical features
            type: array
            items:
              $ref: '#/components/schemas/GrammarFeature'
          lemma:
            description: Base form
            type: string

    KeywordAnnotation:
      description: Distinguished text segment (keyword)
      allOf:
        - $ref: '#/components/schemas/TokenAnnotation'
      type: object


    EntityAnnotation:
        description: Entity classifier and\or link
        allOf:
          - $ref: '#/components/schemas/TokenAnnotation'
        type: object
        properties:
          classes:
            description: Text classification
            type: array
            items:
              $ref: '#/components/schemas/Classification'
          links:
            type: array
            items:
              type: string
              format: uri


    DependencyAnnotation:
        description: Token dependency
        allOf:
          - $ref: '#/components/schemas/TokenAnnotation'
        type: object
        required:
          - dtype
          - governor
        properties:
          dtype:
            type: string
          governor:
            description: Head index of the governor's token
            type: integer
            format: int32
            minimum: 0
        discriminator:
          propertyName: dtype
          mapping:
            SyntacticRelation: '#/components/schemas/SyntacticRelation'
            SemanticRelation: '#/components/schemas/SemanticRelation'


    SyntacticRelation:
      description: Governor's syntactin role
      type: object
      allOf:
        - $ref: '#/components/schemas/DependencyAnnotation'
      required:
        - tag
      properties:
        tag:
          $ref: '#/components/schemas/SyntacticDependency'
        extension:
          description: Further details or non UD tag
          type: string


    SemanticRelation:
      description: Governor's semantic role
      type: object
      allOf:
        - $ref: '#/components/schemas/DependencyAnnotation'
      required:
          - predicate
          - role
      properties:
          predicate:
            description: Ontology predicate (relation or attribute)
            type: string
            format: id
          role:
            $ref: '#/components/schemas/PredicativeRoles'

    PredicativeRoles:
      description: Governor's predicative role (subject or object)
      type: string
      enum:
        - SUBJECT
        - OBJECT

    GrammarFeature:
      description: Grammatic feature
      type: object
      properties:
        attribute:
          type: string
          enum:
            - NUMBER
            - PERSON
            - TENSE
            - MODE
            - NOUN-TYPE
            - VERB-TYPE
            - ADV-TYPE
            - ADJ-TYPE
            - X #other
        value:
          type: string

    SentenceRanking:
      description: Sentence ranking record
      type: object
      required:
        - sentence
      properties:
        sentence:
          $ref: '#/components/schemas/Sentence'
        support:
          type: number
          format: double
          minimum: 0.0
          maximum: 1.0



    Document:
      description: Textual object
      type: object
      required:
        - dtpe
        - id
      properties:
        dtype:
          description: Document type
          type: string
        id:
          description: Document identifier (uri)
          type: string
          format: uri
        title:
          description: Document title
          type: string
          format: utf-8
        source:
          description: Document source (uri)
          type: string
          format: uri
        body:
          description: Document body
          type: string
          format: utf-8
        lang:
          description: Sentence language (ISO 639-1)
          type: string
          minLength: 2
          maxLength: 2
      discriminator:
          propertyName: dtype
          mapping:
            Document: '#/components/schemas/Document'
            AnnotatedDocument: '#/components/schemas/AnnotatedDocument'