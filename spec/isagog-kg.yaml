openapi: 3.0.2
info:
  title: Isagog Knowledge Graph Service
  version: 1.0.0
  description: Isagog Knowledge Graph Service API
  contact:
    email: ks-api@isagog.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: http://localhost
    variables:
      port:
        default: '3200'
      basePath:
        default: /
tags:
  - name: KnowledgeGraphService
    externalDocs:
      url: http://isagog.com/kg/docs
    description: Isagog Knowledge Graph Service Specification
paths:
  #
  #  GLOBAL CRUD OPERATIONS
  #
  /create:
    post:
      tags:
        - KnowledgeGraphService
      summary: Knowledge graph creation
      description: Creates a Knowledge graph
      operationId: createGraph
      responses:
        200:
          description: Success
        401:
          description: Duplicated ID
        402:
          description: Invalid Graph
        501:
          description: Service unavailable
        502:
          description: Server error
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KnowledgeGraph'
        description: The graph to be created
        required: true

  /list:
    get:
      tags:
        - KnowledgeGraphService
      summary: Lists Knowledge Graphs
      description: Returns the list of available KGs (id)
      operationId: listGraphs
      parameters:
        - name: summary
          in: query
          required: false
          schema:
            type: boolean
            default: false
      responses:
        200:
          description: Success, KG id list
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  format: id
        201:
          description: Success, KG summary (id,description,size) list
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/KnowledgeGraph'

  /get:
    get:
      tags:
        - KnowledgeGraphService
      summary: Retrieves a Knowledge Graph
      description: Returns a Knowledge Graph, either with summary or full content
      operationId: getGraph
      parameters:
        - name: kg
          in: query
          required: true
          schema:
            type: string
          description: The Knowledge Graph identifier
        - name: content
          in: query
          required: false
          schema:
            type: boolean
            default: false
          description: 'Triggers full content: default = false'
          allowEmptyValue: true
      responses:
        200:
          description: Success, json content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KnowledgeGraph'
        201:
          description: Success, zipped content
          content:
            application/zip:
              schema:
                type: string
                format: binary
        401:
          description: Unknown Graph
        402:
          description: Graph too large
        501:
          description: Service unavailable
        502:
          description: Server error

    summary: Knowledge Graph
    description: Returns a Knowledge Graph

  /delete:
    get:
      tags:
        - KnowledgeGraphService
      summary: Deletes a Knowledge Graph
      description: Knowledge graph deletion
      operationId: deleteGraph
      parameters:
        - name: kg
          in: query
          required: true
          schema:
            type: string
          description: The Knowledge Graph identifier

      responses:
        200:
          description: Success, json content

        401:
          description: Unknown Graph
        402:
          description: Dependencies violation
        501:
          description: Service unavailable
        502:
          description: Server error



  /{kg}/get:
    get:
      summary: Retrieves an element in a Knowledge Graph
      description: Get the named element, if present
      parameters:
        - name: kg
          in: path
          required: true
          schema:
            type: string
        - name: id
          in: query
          required: true
          schema:
            type: string
            format: id

      operationId: getKnowledgeElement
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/KnowledgeElement'
        401:
          description: Unknown graph
        402:
          description: Unknown Entity
        501:
          description: Service unavailable
        502:
          description: Server error
      tags:
        - KnowledgeGraphService

  /{kg}/assert:
    post:
      summary: Statement assertion
      description: Asserts a statement in a Knowledge Graph
      parameters:
        - name: kg
          in: path
          required: true
          schema:
            type: string
          description: Assertion context (KG id)
      operationId: assertStatement
      responses:
        200:
          description: Asserted successfully
        401:
          description: Unknown graph
        402:
          description: Bad statement
        501:
          description: Service unavailable
        502:
          description: Server error
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Statement'
        description: Type definition statement
        required: true
      tags:
        - KnowledgeGraphService


  /{kg}/retract:
    post:
      summary: Statement retraction
      description: Retracts a statement and all the statements depending on it
      parameters:
        - name: kg
          in: path
          required: true
          schema:
            type: string
      operationId: retractStatement
      responses:
        200:
          description: Success

        401:
          description: Unknown graph
        402:
          description: Bad statement
        501:
          description: Service unavailable
        502:
          description: Server error
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Statement'
        required: true
      tags:
        - KnowledgeGraphService


  /evaluate:
    get:
      summary: Entity individual evaluation
      description: Evaluates the Entity as an instance of the specified concept
      parameters:
        - name: kg
          in: query
          required: false
          schema:
            type: string
            format: id
          description: Evaluation context (opt)
        - name: id
          in: query
          required: true
          schema:
            type: string
          description: Entity identifier
        - name: concept
          in: query
          required: true
          schema:
            type: string
            format: id
          description: Concept to be evaluated
        - name: method
          in: query
          required: false
          schema:
            type: string
            enum:
              - DEDUCTION
              - ABDUCTION
            default: DEDUCTION
          description: Inference method to be used
          allowEmptyValue: true
      operationId: evaluateEntity
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Classification'
        401:
          description: Not found
        402:
          description: Unknown graph
        403:
          description: Invalid arguments
        501:
          description: Service unavailable
        502:
          description: Server error
      tags:
        - KnowledgeGraphService


  /search:
    get:
      tags:
        - KnowledgeGraphService
      summary: Knowledge search
      description: Search knowledge items
      operationId: search
      parameters:
        - name: kg
          in: query
          required: false
          schema:
            type: string
            format: id
          description: Search context (opt)
        - name: query
          in: query
          description: The query to search by
          required: true
          explode: false
          schema:
            type: string
        - name: attribute
          in: query
          description: The attribute to search by (opt)
          required: false
          schema:
            type: string
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/KnowledgeElement'
        201:
          description: No results
        401:
          description: Unknown graph
        402:
          description: Invalid key
        501:
          description: Service unavailable
        502:
          description: Server error

  /query:
    post:
      summary: Knowledge query
      description: Queries a Knowledge Graph
      parameters:
        - name: kg
          in: query
          required: false
          schema:
            type: string
            format: id
          description: Query context (opt)
      operationId: query
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryResponse'
        401:
          description: Unknown graph
        402:
          description: Invalid query
        501:
          description: Service unavailable
        502:
          description: Server error
      tags:
        - KnowledgeGraphService
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Query'
        description: The query Frame
        required: true

  /analyze:
    post:
      summary: Sentence analysis
      description: Provides an annotation of the supplied text object according to available knowledge, including entity recognition, linking and relations (opt)
      parameters:
        - name: kg
          in: query
          required: false
          description: Analysis context (opt)
          schema:
            type: string
        - name: task
          in: query
          required: false
          schema:
            type: string
            enum:
              - ENTITIES
              - CONCEPTS
              - RELATIONS
            default: ENTITIES
      operationId: analyzeSentence
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TextAnnotation'

        401:
          description: Unknown graph
        402:
          description: Invalid sentence
        403:
          description: Unsupported task
        501:
          description: Service unavailable
        502:
          description: Server error
      tags:
        - KnowledgeGraphService
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TextualContent'

externalDocs:
  description: See Isagog Knowledge API example
  url: https://isagog.com/knowledge/asyncapi.html
components:
  schemas:

    KnowledgeGraph:
      description: Set of statements about conceptualized entities
      required:
        - id
      type: object
      properties:
        id:
          description: Knowledge Graph id
          type: string
          format: id
        sources:
          description: KG sources
          type: array
          items:
            type: string
            format: uri
        description:
          description: KG description
          type: string
        size:
          description: Statement number
          type: integer
          format: int32
        ontologies:
          description: Ontologies where concepts and relations are defined (URIs)
          type: array
          items:
            type: string
            format: uri
        context:
          description: Other graphs providing contextual knowledge
          type: array
          items:
            type: string
            format: id
        content:
          description: KG content (statements)
          type: array
          items:
            $ref: '#/components/schemas/EntityStatement'
        annotations:
          description: KG annotation (application specific)
          type: array
          items:
            $ref: '#/components/schemas/KnowledgeAnnotation'

    TextualContent:
      type: object
      required:
        - text
      properties:
        lang:
          description: Language
          type: string
          enum:
            - en
            - es
            - fr
            - it
            - de
        text:
          description: Textual content
          type: string
          format: byte
        context:
          description: Textual context
          type: string
          format: byte


    KnowledgeAnnotation:
      description: Annotation
      required:
        - property
        - value
      type: object
      properties:
        property:
          description: The annotation property
          type: string
        value:
          description: The annotation
          type: string
          format: byte


    Classification:
      description: Knowledge Element classification record
      type: object
      required:
        - classifier
      properties:
        classifier:
          $ref: '#/components/schemas/AtomicConcept'
        support:
          $ref: '#/components/schemas/Support'
        method:
          type: string
          enum:
            - DEDUCTION
            - ABDUCTION
          default: DEDUCTION

    QueryResponse:
      description: Query result set
      type: object
      required:
        - header
        - rows
        - report
        - query
      properties:
        query:
          type: string
        header:
          type: array
          items:
            $ref: '#/components/schemas/QueryResponseHeader'
        rows:
          type: array
          items:
            $ref: '#/components/schemas/QueryResponseItem'

    QueryResponseHeader:
      description: Query result set header
      type: object
      required:
        - name
        - dtype
      properties:
        name:
          type: string
        dtype:
          type: string
          enum:
            - Uri
            - Boolean
            - Integer
            - Double
            - String
    QueryResponseItem:
      description: Query result set row
      type: object
      required:
        - row
        - support
      properties:
        row:
          type: array
          items:
            type: string
        support:
          $ref: '#/components/schemas/Support'

    KnowledgeElement:
      description: Managed Knowledge Element
      type: object
      required:
        - id
        - ktype
      properties:
        id:
          type: string
          format: id
        ktype:
          type: string
          enum:
            - AtomicConcept
            - RelationalConcept
            - AttributiveConcept
            - Relation
            - Entity
            - ConceptStatement
            - EntityStatement
            - ClassificationStatement
            - RelationalStatement
            - AttributiveStatement
            - Situation
        annotations:
          type: array
          items:
            $ref: '#/components/schemas/KnowledgeAnnotation'
      discriminator:
        propertyName: ktype
        mapping:
          AtomicConcept: '#/components/schemas/AtomicConcept'
          RelationalConcept: '#/components/schemas/RelationalConcept'
          AttributiveConcept: '#/components/schemas/AttributiveConcept'
          Relation: '#/components/schemas/Relation'
          Attribute: '#/components/schemas/Attribute'
          Entity: '#/components/schemas/Entity'
          ConceptStatement: '#/components/schemas/ConceptStatement'
          EntityStatement: '#/components/schemas/EntityStatement'
          ClassificationStatement: '#/components/schemas/ClassificationStatement'
          RelationalStatement: '#/components/schemas/RelationalStatement'
          AttributiveStatement: '#/components/schemas/AttributiveStatement'
          Situation: '#/components/schemas/Situation'

    AtomicConcept:
      description: Unary atomic classifier
      allOf:
        - $ref: '#/components/schemas/KnowledgeElement'
      type: object
      properties:
        statements:
          type: array
          items:
            $ref: '#/components/schemas/ConceptStatement'

    RelationalConcept:
      description: Unary Relational classifier
      allOf:
        - $ref: '#/components/schemas/KnowledgeElement'
      type: object
      required:
        - relation
        - quantifier
      properties:
        relation:
          type: string
          format: id
        restriction:
          type: string
        quantifier:
          type: string
          enum:
            - SOME
            - ALL
            - ATLEAST1
            - ATMOST1

    AttributiveConcept:
      description: Unary attributive classifier
      allOf:
        - $ref: '#/components/schemas/KnowledgeElement'
      type: object
      required:
        - attribute
      properties:
        attribute:
          type: string
          format: id
        value:
          type: string
          format: byte
        constraint:
          type: string
          enum:
            - HAS_SOME_VALUE
            - EQUALS
            - GREATER_THAN
            - SMALLER_THAN
          default: HAS_SOME_VALUE


    Relation:
      description: Class of Entity pairs
      allOf:
        - $ref: '#/components/schemas/KnowledgeElement'

    Attribute:
      description: Class of Entity-value pairs
      allOf:
        - $ref: '#/components/schemas/KnowledgeElement'

    Entity:
      description: Individual entity
      allOf:
        - $ref: '#/components/schemas/KnowledgeElement'
      type: object
      properties:
        statements:
          type: array
          items:
            $ref: '#/components/schemas/EntityStatement'

    Statement:
      description: Knowledge assertion
      allOf:
        - $ref: '#/components/schemas/KnowledgeElement'
      type: object
      required:
         - subject
      properties:
        subject:
          type: string
          format: id
        privacy:
          type: string
          enum:
            - OWNER
            - TRUSTED
            - CONTACTS
            - PUBLIC
          default: OWNER
        support:
          $ref: '#/components/schemas/Support'

    ConceptStatement:
        description: Conceptual assertion
        allOf:
          - $ref: '#/components/schemas/Statement'
        type: object
        required:
          - object
          - predicate
        properties:
          object:
            type: string
            format: id
          predicate:
            type: string
            enum:
              - INCLUSION
              - DISJUNCTION
              - EQUIVALENCE


    EntityStatement:
        description: Individual assertion
        allOf:
          - $ref: '#/components/schemas/Statement'


    ClassificationStatement:
      description: Entity classification
      allOf:
        - $ref: '#/components/schemas/EntityStatement'
      type: object
      required:
        - concept
      properties:
        concept:
          type: string
          format: id

    RelationalStatement:
        description: Entity relatedness
        allOf:
            - $ref: '#/components/schemas/EntityStatement'
        type: object
        required:
            - relation
            - entity
        properties:
            relation:
              description: Ontology relation
              type: string
              format: id
            entity:
              description: Related entity
              type: string
              format: id


    AttributiveStatement:
      description: Entity attribute
      allOf:
        - $ref: '#/components/schemas/EntityStatement'
      type: object
      required:
        - attribute
        - values
      properties:
        attribute:
          description: Ontology attribute
          type: string
          format: id
        values:
          description: Attribute values
          type: array
          items:
            type: string
            format: byte

    LinguisticStatement:
      description: Natural language statement
      allOf:
       - $ref: '#/components/schemas/Statement'
      type: object
      required:
        - utterance
      properties:
        utterance:
          description: Utterance
          type: string
          format: byte

    Frame:
      description: Frame type
      allOf:
        - $ref: '#/components/schemas/KnowledgeElement'
      type: object
      required:
        - ftype
        - slots
      properties:
        ftype:
          type: string
          enum:
            - Query
            - Situation
          default: Situation
        slots:
          description: List of conceptual elements
          type: array
          items:
            $ref: '#/components/schemas/Slot'
      discriminator:
        propertyName: ftype
        mapping:
          Query: '#/components/schemas/Query'
          Situation: '#/components/schemas/Situation'

    Query:
      description: Query frame
      allOf:
        - $ref: '#/components/schemas/Frame'
      type: object
      properties:
        qtype:
          type: string
          enum:
            - IndividuationQuery
            - CardinalityQuery
            - ExtensionQuery

    Situation:
      description: Situation frame
      allOf:
        - $ref: '#/components/schemas/Frame'

    Slot:
      description: Framed conceptual element
      type: object
      required:
        - id
        - stype
        - ontologyReference
        - mandatory
        - distinguished
        - lexicalAnnotations
        - values
      properties:
        id:
          description: Slot identifier, must be univoque in the frame
          type: string
        stype:
          type: string
          enum:
            - ConceptualSlot
            - RelationalSlot
            - AttributiveSlot
        mandatory:
          description: A slot that must be instantiated
          type: boolean
          default: false
        distinguished:
          description: A slot that has a specific pragmatic role
          type: boolean
          default: false
        informative:
          description: A slot that must be presented to consumers
          type: boolean
          default: false
        ontologyReference:
          description: Ontology element linked to the slot
          type: string
          format: id
      discriminator:
        propertyName: stype
        mapping:
          ConceptualSlot: '#/components/schemas/ConceptualSlot'
          RelationalSlot: '#/components/schemas/RelationalSlot'
          AttributiveSlot: '#/components/schemas/AttributiveSlot'

    FrameInstance:
      description: Frame instance
      type: object
      required:
        - ftype
      properties:
          ftype:
            description: Frame type identifier
            type: string
            format: id
          slotValues:
            type: array
            items:
              $ref: '#/components/schemas/SlotValue'

    SlotSentenceMapping:
      type: object
      required:
        - startIndex
        - endIndex
      properties:
        startIndex:
          type: integer
          format: int32
        endIndex:
          type: integer
          format: int32

    ConceptualSlot:
      allOf:
        - $ref: '#/components/schemas/Slot'

    RelationalSlot:
      allOf:
        - $ref: '#/components/schemas/Slot'
      type: object
      properties:
        subjectBinding:
          description: The id of the slot representing the Attribute's subject
          type: string
        objectBinding:
          type: string
          format: id
      required:
        - subjectBinding

    AttributiveSlot:
      allOf:
        - $ref: '#/components/schemas/Slot'
      type: object
      description:  A slot bound to an Attribute (data property)
      properties:
        subjectBinding:
          description: The id of the slot representing the Attribute's subject
          type: string
          format: id
        valueType:
          description: Semantics of the Attribute's value
          type: string
          enum:
            - STRING
            - NUMBER
            - TEXT
            - DATE
            - MONEY
            - LOCATION
            - NAME
            - ANY
          default: ANY
        comparation:
          description: The comparison operator when instantiated
          type: string
          enum:
            - EQUAL
            - GREATER
            - SMALLER
            - SIMILAR
            - UNDEFINED
          default: UNDEFINED
      required:
        - subjectBinding

    SlotValue:
      description: Slot value instance
      type: object
      required:
        - slotTypeId
        - value
      properties:
        slotTypeId:
          description: Slot type's identifier
          type: string
          format: id
        sourceType:
          description: The value provenance
          type: string
          enum:
            - USER_INPUT
            - KNOWLEGDE_BASE
            - UNDEFINED
          default: UNDEFINED
        value:
          type: string
          format: byte
        support:
          $ref: '#/components/schemas/Support'


    TextAnnotation:
      description: Text annotation
      type: object
      required:
        - index
        - atype
      properties:
        index:
          description: Annotation array index, should be consistent with the container's one
          type: integer
          format: int32
        atype:
          type: string
          enum:
            - EntityAnnotation
            - GrammarAnnotation
            - SyntaxAnnotation
            - DependencyAnnotation
            - RelationAnnotation
        support:
              $ref: '#/components/schemas/Support'
      discriminator:
        propertyName: atype
        mapping:
          EntityAnnotation: '#/components/schemas/EntityAnnotation'
          GrammarAnnotation: '#/components/schemas/GrammarAnnotation'
          SyntaxAnnotation: '#/components/schemas/SyntaxAnnotation'
          DependencyAnnotation: '#/components/schemas/DependencyAnnotation'
          RelationAnnotation: '#/components/schemas/RelationAnnotation'

    TokenAnnotation:
      description: Token annotation
      allOf:
        - $ref: '#/components/schemas/TextAnnotation'
      type: object
      required:
        - start
        - end
      properties:
        start:
          type: integer
          format: int32
        end:
          type: integer
          format: int32


    EntityAnnotation:
      description: Entity classifier and\or link
      allOf:
        - $ref: '#/components/schemas/TokenAnnotation'
      type: object
      required:
        - classifier
      properties:
        classifiers:
          type: array
          items:
            type: string
            format: id
        links:
          type: array
          items:
            type: string
            format: uri

    GrammarAnnotation:
      description: Token grammar spec
      allOf:
        - $ref: '#/components/schemas/TokenAnnotation'
      type: object
      required:
        - pos
      properties:
        pos:
          type: string
          description: Part of speech
          enum:
            - NOUN
            - VERB
            - ADJECTIVE
            - ADVERB
            - PRONOUN
            - NUMERAL
        spec:
          type: string
          enum:
            - V-MODAL
            - V-AUXILIAR
            - N-NAME
            - QUALIFIER
        number:
          type: string
          enum:
            - SINGULAR
            - PLURAL
            - DUAL
        person:
          type: string
          enum:
            - FIRST
            - SECOND
            - THIRD

    DependencyAnnotation:
        description: Token dependency
        allOf:
          - $ref: '#/components/schemas/TextAnnotation'
        type: object
        required:
          - governor
          - dependent
        properties:
          governor:
            description: Index of the governor token annotation
            type: integer
            format: int32
          dependent:
            description: Index of the dependent token annotation
            type: integer
            format: int32


    SyntaxAnnotation:
      description: Token syntactic dependency
      allOf:
        - $ref: '#/components/schemas/DependencyAnnotation'
      type: object
      required:
        - syntax
      properties:
        syntax:
          type: string
          enum:
            - OBJECT
            - SUBJECT
            - COMPLEMENT
            - ADJUNCT
            - COORDINATE
            #TO CONTINUE


    RelationAnnotation:
      description: Token semantic dependency
      allOf:
        - $ref: '#/components/schemas/DependencyAnnotation'
      type: object
      required:
        - relation
      properties:
        relation:
            type: string
            description: Ontology relation
            format: id


    Support:
      type: object
      description: Knowledge support score
      required:
        - evidence
        - confidence
      properties:
        evidence:
          description: Evidence score [1=Positive evidence, 0=Negative evidence]
          type: number
          format: double
          default: 0.5
        confidence:
          description: Confidence score [1=Full confidence, 0=No confidence]
          type: number
          format: double
          default: 0.5

  links: {}
  callbacks: {}
security: []

