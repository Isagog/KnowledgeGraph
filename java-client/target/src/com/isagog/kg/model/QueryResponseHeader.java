/*
 * Isagog Knowledge Graph Interaction Service
 * Isagog Knowledge Graph Interaction module
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: ks-api@isagog.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.isagog.kg.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Query result set header
 */
@ApiModel(description = "Query result set header")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2020-12-23T10:03:52.590+01:00[Europe/Berlin]")
public class QueryResponseHeader {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * Gets or Sets dtype
   */
  @JsonAdapter(DtypeEnum.Adapter.class)
  public enum DtypeEnum {
    URI("URI"),
    
    BOOLEAN("BOOLEAN"),
    
    INTEGER("INTEGER"),
    
    DOUBLE("DOUBLE"),
    
    STRING("STRING");

    private String value;

    DtypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DtypeEnum fromValue(String value) {
      for (DtypeEnum b : DtypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DtypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DtypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DtypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DtypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_DTYPE = "dtype";
  @SerializedName(SERIALIZED_NAME_DTYPE)
  private DtypeEnum dtype;


  public QueryResponseHeader name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @ApiModelProperty(required = true, value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public QueryResponseHeader dtype(DtypeEnum dtype) {
    
    this.dtype = dtype;
    return this;
  }

   /**
   * Get dtype
   * @return dtype
  **/
  @ApiModelProperty(required = true, value = "")

  public DtypeEnum getDtype() {
    return dtype;
  }


  public void setDtype(DtypeEnum dtype) {
    this.dtype = dtype;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QueryResponseHeader queryResponseHeader = (QueryResponseHeader) o;
    return Objects.equals(this.name, queryResponseHeader.name) &&
        Objects.equals(this.dtype, queryResponseHeader.dtype);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, dtype);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QueryResponseHeader {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    dtype: ").append(toIndentedString(dtype)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

