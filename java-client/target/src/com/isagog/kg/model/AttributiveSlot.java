/*
 * Isagog Knowledge Graph Interaction Service
 * Isagog Knowledge Graph Interaction module
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: ks-api@isagog.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.isagog.kg.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.isagog.kg.model.AttributiveSlot;
import com.isagog.kg.model.ConceptualSlot;
import com.isagog.kg.model.KnowledgeAnnotation;
import com.isagog.kg.model.RelationalSlot;
import com.isagog.kg.model.Slot;
import com.isagog.kg.model.ValueSlot;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * A slot bound to an Attribute (data property)
 */
@ApiModel(description = "A slot bound to an Attribute (data property)")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2020-12-23T10:03:52.590+01:00[Europe/Berlin]")
public class AttributiveSlot extends Slot {
  public static final String SERIALIZED_NAME_SUBJECT_BINDING = "subjectBinding";
  @SerializedName(SERIALIZED_NAME_SUBJECT_BINDING)
  private Integer subjectBinding;

  public static final String SERIALIZED_NAME_OBJECT_BINDING = "objectBinding";
  @SerializedName(SERIALIZED_NAME_OBJECT_BINDING)
  private Integer objectBinding;

  /**
   * Comparation operator for data values (opt)
   */
  @JsonAdapter(ComparationEnum.Adapter.class)
  public enum ComparationEnum {
    EQUAL("EQUAL"),
    
    GREATER("GREATER"),
    
    SMALLER("SMALLER"),
    
    SIMILAR("SIMILAR");

    private String value;

    ComparationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ComparationEnum fromValue(String value) {
      for (ComparationEnum b : ComparationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ComparationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ComparationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ComparationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ComparationEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_COMPARATION = "comparation";
  @SerializedName(SERIALIZED_NAME_COMPARATION)
  private ComparationEnum comparation = ComparationEnum.EQUAL;

  public AttributiveSlot() {
    this.ktype = this.getClass().getSimpleName();
  }

  public AttributiveSlot subjectBinding(Integer subjectBinding) {
    
    this.subjectBinding = subjectBinding;
    return this;
  }

   /**
   * Slot&#39;s subject binding, must be a ConceptualSlot in the same frame.
   * minimum: 0
   * maximum: 128
   * @return subjectBinding
  **/
  @ApiModelProperty(required = true, value = "Slot's subject binding, must be a ConceptualSlot in the same frame.")

  public Integer getSubjectBinding() {
    return subjectBinding;
  }


  public void setSubjectBinding(Integer subjectBinding) {
    this.subjectBinding = subjectBinding;
  }


  public AttributiveSlot objectBinding(Integer objectBinding) {
    
    this.objectBinding = objectBinding;
    return this;
  }

   /**
   * Slot&#39;s object binding, must be a ValueSlot in the same frame.
   * minimum: 0
   * maximum: 128
   * @return objectBinding
  **/
  @ApiModelProperty(required = true, value = "Slot's object binding, must be a ValueSlot in the same frame.")

  public Integer getObjectBinding() {
    return objectBinding;
  }


  public void setObjectBinding(Integer objectBinding) {
    this.objectBinding = objectBinding;
  }


  public AttributiveSlot comparation(ComparationEnum comparation) {
    
    this.comparation = comparation;
    return this;
  }

   /**
   * Comparation operator for data values (opt)
   * @return comparation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Comparation operator for data values (opt)")

  public ComparationEnum getComparation() {
    return comparation;
  }


  public void setComparation(ComparationEnum comparation) {
    this.comparation = comparation;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AttributiveSlot attributiveSlot = (AttributiveSlot) o;
    return Objects.equals(this.subjectBinding, attributiveSlot.subjectBinding) &&
        Objects.equals(this.objectBinding, attributiveSlot.objectBinding) &&
        Objects.equals(this.comparation, attributiveSlot.comparation) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(subjectBinding, objectBinding, comparation, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AttributiveSlot {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    subjectBinding: ").append(toIndentedString(subjectBinding)).append("\n");
    sb.append("    objectBinding: ").append(toIndentedString(objectBinding)).append("\n");
    sb.append("    comparation: ").append(toIndentedString(comparation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

