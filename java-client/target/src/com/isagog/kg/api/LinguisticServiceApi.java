/*
 * Isagog Knowledge Graph Language Service
 * Isagog Knowledge Graph Language module
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: ks-api@isagog.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.isagog.kg.api;

import com.isagog.kg.ApiCallback;
import com.isagog.kg.ApiClient;
import com.isagog.kg.ApiException;
import com.isagog.kg.ApiResponse;
import com.isagog.kg.Configuration;
import com.isagog.kg.Pair;
import com.isagog.kg.ProgressRequestBody;
import com.isagog.kg.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.isagog.kg.model.Document;
import com.isagog.kg.model.Sentence;
import com.isagog.kg.model.SentenceAnnotation;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LinguisticServiceApi {
    private ApiClient localVarApiClient;

    public LinguisticServiceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LinguisticServiceApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for analyze
     * @param task  (optional)
     * @param sentence  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unknown graph </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid sentence </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unsupported task </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyzeCall(String task, Sentence sentence, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = sentence;

        // create path and map variables
        String localVarPath = "/analyze";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (task != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("task", task));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyzeValidateBeforeCall(String task, Sentence sentence, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = analyzeCall(task, sentence, _callback);
        return localVarCall;

    }

    /**
     * Sentence analysis
     * Provides an annotation of the supplied text object according to available knowledge, including entity recognition, linking and relations (opt)
     * @param task  (optional)
     * @param sentence  (optional)
     * @return SentenceAnnotation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unknown graph </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid sentence </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unsupported task </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public SentenceAnnotation analyze(String task, Sentence sentence) throws ApiException {
        ApiResponse<SentenceAnnotation> localVarResp = analyzeWithHttpInfo(task, sentence);
        return localVarResp.getData();
    }

    /**
     * Sentence analysis
     * Provides an annotation of the supplied text object according to available knowledge, including entity recognition, linking and relations (opt)
     * @param task  (optional)
     * @param sentence  (optional)
     * @return ApiResponse&lt;SentenceAnnotation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unknown graph </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid sentence </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unsupported task </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SentenceAnnotation> analyzeWithHttpInfo(String task, Sentence sentence) throws ApiException {
        okhttp3.Call localVarCall = analyzeValidateBeforeCall(task, sentence, null);
        Type localVarReturnType = new TypeToken<SentenceAnnotation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Sentence analysis (asynchronously)
     * Provides an annotation of the supplied text object according to available knowledge, including entity recognition, linking and relations (opt)
     * @param task  (optional)
     * @param sentence  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unknown graph </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid sentence </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unsupported task </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyzeAsync(String task, Sentence sentence, final ApiCallback<SentenceAnnotation> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyzeValidateBeforeCall(task, sentence, _callback);
        Type localVarReturnType = new TypeToken<SentenceAnnotation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for extract
     * @param task  (optional)
     * @param limit  (optional)
     * @param document  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unknown graph </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid document </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unsupported task </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extractCall(String task, Integer limit, Document document, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = document;

        // create path and map variables
        String localVarPath = "/extract";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (task != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("task", task));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extractValidateBeforeCall(String task, Integer limit, Document document, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = extractCall(task, limit, document, _callback);
        return localVarCall;

    }

    /**
     * Sentence extraction
     * Extract sentences from a text
     * @param task  (optional)
     * @param limit  (optional)
     * @param document  (optional)
     * @return List&lt;Sentence&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unknown graph </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid document </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unsupported task </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public List<Sentence> extract(String task, Integer limit, Document document) throws ApiException {
        ApiResponse<List<Sentence>> localVarResp = extractWithHttpInfo(task, limit, document);
        return localVarResp.getData();
    }

    /**
     * Sentence extraction
     * Extract sentences from a text
     * @param task  (optional)
     * @param limit  (optional)
     * @param document  (optional)
     * @return ApiResponse&lt;List&lt;Sentence&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unknown graph </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid document </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unsupported task </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Sentence>> extractWithHttpInfo(String task, Integer limit, Document document) throws ApiException {
        okhttp3.Call localVarCall = extractValidateBeforeCall(task, limit, document, null);
        Type localVarReturnType = new TypeToken<List<Sentence>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Sentence extraction (asynchronously)
     * Extract sentences from a text
     * @param task  (optional)
     * @param limit  (optional)
     * @param document  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unknown graph </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid document </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unsupported task </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extractAsync(String task, Integer limit, Document document, final ApiCallback<List<Sentence>> _callback) throws ApiException {

        okhttp3.Call localVarCall = extractValidateBeforeCall(task, limit, document, _callback);
        Type localVarReturnType = new TypeToken<List<Sentence>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
