/*
 * Isagog Knowledge Graph Knowledge Service
 * Isagog Knowledge Graph Knowledge module
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: ks-api@isagog.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.isagog.kg.api;

import com.isagog.kg.ApiCallback;
import com.isagog.kg.ApiClient;
import com.isagog.kg.ApiException;
import com.isagog.kg.ApiResponse;
import com.isagog.kg.Configuration;
import com.isagog.kg.Pair;
import com.isagog.kg.ProgressRequestBody;
import com.isagog.kg.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.isagog.kg.model.Attribute;
import com.isagog.kg.model.Concept;
import com.isagog.kg.model.ElementRanking;
import com.isagog.kg.model.Entity;
import com.isagog.kg.model.Frame;
import com.isagog.kg.model.Relation;
import com.isagog.kg.model.SentenceAnnotation;
import java.net.URI;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class KnowledgeServiceApi {
    private ApiClient localVarApiClient;

    public KnowledgeServiceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public KnowledgeServiceApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for evaluateEntity
     * @param entity Entity specification (required)
     * @param method Inference method to be used (optional, default to DEDUCTION)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Unknown graph </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid arguments </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Unsupported method </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call evaluateEntityCall(Entity entity, String method, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = entity;

        // create path and map variables
        String localVarPath = "/evaluate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (method != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("method", method));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call evaluateEntityValidateBeforeCall(Entity entity, String method, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'entity' is set
        if (entity == null) {
            throw new ApiException("Missing the required parameter 'entity' when calling evaluateEntity(Async)");
        }
        

        okhttp3.Call localVarCall = evaluateEntityCall(entity, method, _callback);
        return localVarCall;

    }

    /**
     * Entity evaluation
     * Evaluates an entity as an instance of known concepts. Deductive evaluation should return asserted and implied entity classes. Abductive evaluation should return a ranking of the most plausible entity classes.
     * @param entity Entity specification (required)
     * @param method Inference method to be used (optional, default to DEDUCTION)
     * @return List&lt;ElementRanking&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Unknown graph </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid arguments </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Unsupported method </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public List<ElementRanking> evaluateEntity(Entity entity, String method) throws ApiException {
        ApiResponse<List<ElementRanking>> localVarResp = evaluateEntityWithHttpInfo(entity, method);
        return localVarResp.getData();
    }

    /**
     * Entity evaluation
     * Evaluates an entity as an instance of known concepts. Deductive evaluation should return asserted and implied entity classes. Abductive evaluation should return a ranking of the most plausible entity classes.
     * @param entity Entity specification (required)
     * @param method Inference method to be used (optional, default to DEDUCTION)
     * @return ApiResponse&lt;List&lt;ElementRanking&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Unknown graph </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid arguments </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Unsupported method </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ElementRanking>> evaluateEntityWithHttpInfo(Entity entity, String method) throws ApiException {
        okhttp3.Call localVarCall = evaluateEntityValidateBeforeCall(entity, method, null);
        Type localVarReturnType = new TypeToken<List<ElementRanking>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Entity evaluation (asynchronously)
     * Evaluates an entity as an instance of known concepts. Deductive evaluation should return asserted and implied entity classes. Abductive evaluation should return a ranking of the most plausible entity classes.
     * @param entity Entity specification (required)
     * @param method Inference method to be used (optional, default to DEDUCTION)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Unknown graph </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid arguments </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Unsupported method </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call evaluateEntityAsync(Entity entity, String method, final ApiCallback<List<ElementRanking>> _callback) throws ApiException {

        okhttp3.Call localVarCall = evaluateEntityValidateBeforeCall(entity, method, _callback);
        Type localVarReturnType = new TypeToken<List<ElementRanking>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for extractFrames
     * @param limit Limits the number of returned frame candidates to the supplied value (optional)
     * @param sentenceAnnotation  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Frame span </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Insufficient data mapping </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extractFramesCall(Integer limit, SentenceAnnotation sentenceAnnotation, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = sentenceAnnotation;

        // create path and map variables
        String localVarPath = "/frames/extract";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extractFramesValidateBeforeCall(Integer limit, SentenceAnnotation sentenceAnnotation, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = extractFramesCall(limit, sentenceAnnotation, _callback);
        return localVarCall;

    }

    /**
     * Frame extraction from sentences
     * Extract frames from an annotated sentence
     * @param limit Limits the number of returned frame candidates to the supplied value (optional)
     * @param sentenceAnnotation  (optional)
     * @return List&lt;Frame&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Frame span </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Insufficient data mapping </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public List<Frame> extractFrames(Integer limit, SentenceAnnotation sentenceAnnotation) throws ApiException {
        ApiResponse<List<Frame>> localVarResp = extractFramesWithHttpInfo(limit, sentenceAnnotation);
        return localVarResp.getData();
    }

    /**
     * Frame extraction from sentences
     * Extract frames from an annotated sentence
     * @param limit Limits the number of returned frame candidates to the supplied value (optional)
     * @param sentenceAnnotation  (optional)
     * @return ApiResponse&lt;List&lt;Frame&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Frame span </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Insufficient data mapping </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Frame>> extractFramesWithHttpInfo(Integer limit, SentenceAnnotation sentenceAnnotation) throws ApiException {
        okhttp3.Call localVarCall = extractFramesValidateBeforeCall(limit, sentenceAnnotation, null);
        Type localVarReturnType = new TypeToken<List<Frame>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Frame extraction from sentences (asynchronously)
     * Extract frames from an annotated sentence
     * @param limit Limits the number of returned frame candidates to the supplied value (optional)
     * @param sentenceAnnotation  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Frame span </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Insufficient data mapping </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extractFramesAsync(Integer limit, SentenceAnnotation sentenceAnnotation, final ApiCallback<List<Frame>> _callback) throws ApiException {

        okhttp3.Call localVarCall = extractFramesValidateBeforeCall(limit, sentenceAnnotation, _callback);
        Type localVarReturnType = new TypeToken<List<Frame>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllAttributes
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No results </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid query </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid attribute </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllAttributesCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/attributes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllAttributesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getAllAttributesCall(_callback);
        return localVarCall;

    }

    /**
     * Gets all attributes in the Knowledge Graph ontology
     * Gets an attirbute
     * @return List&lt;Attribute&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No results </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid query </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid attribute </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public List<Attribute> getAllAttributes() throws ApiException {
        ApiResponse<List<Attribute>> localVarResp = getAllAttributesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Gets all attributes in the Knowledge Graph ontology
     * Gets an attirbute
     * @return ApiResponse&lt;List&lt;Attribute&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No results </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid query </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid attribute </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Attribute>> getAllAttributesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllAttributesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Attribute>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets all attributes in the Knowledge Graph ontology (asynchronously)
     * Gets an attirbute
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No results </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid query </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid attribute </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllAttributesAsync(final ApiCallback<List<Attribute>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllAttributesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Attribute>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllConcepts
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No results </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid query </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid attribute </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllConceptsCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/concepts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllConceptsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getAllConceptsCall(_callback);
        return localVarCall;

    }

    /**
     * Get all the atomic concepts in the Knowledge Graph
     * Get all the atomic concepts in the Knowledge Graph
     * @return List&lt;Concept&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No results </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid query </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid attribute </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public List<Concept> getAllConcepts() throws ApiException {
        ApiResponse<List<Concept>> localVarResp = getAllConceptsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get all the atomic concepts in the Knowledge Graph
     * Get all the atomic concepts in the Knowledge Graph
     * @return ApiResponse&lt;List&lt;Concept&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No results </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid query </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid attribute </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Concept>> getAllConceptsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllConceptsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Concept>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the atomic concepts in the Knowledge Graph (asynchronously)
     * Get all the atomic concepts in the Knowledge Graph
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No results </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid query </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid attribute </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllConceptsAsync(final ApiCallback<List<Concept>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllConceptsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Concept>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllFrames
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No results </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid query </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid attribute </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllFramesCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/frames";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllFramesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getAllFramesCall(_callback);
        return localVarCall;

    }

    /**
     * Gets all the frames in the Knowledge Graph ontology
     * Gets a frame
     * @return List&lt;Frame&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No results </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid query </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid attribute </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public List<Frame> getAllFrames() throws ApiException {
        ApiResponse<List<Frame>> localVarResp = getAllFramesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Gets all the frames in the Knowledge Graph ontology
     * Gets a frame
     * @return ApiResponse&lt;List&lt;Frame&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No results </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid query </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid attribute </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Frame>> getAllFramesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllFramesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Frame>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets all the frames in the Knowledge Graph ontology (asynchronously)
     * Gets a frame
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No results </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid query </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid attribute </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllFramesAsync(final ApiCallback<List<Frame>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllFramesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Frame>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllRelations
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No results </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid query </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid attribute </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllRelationsCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/relations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllRelationsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getAllRelationsCall(_callback);
        return localVarCall;

    }

    /**
     * Gets all the relations in the Knowledge Graph ontology
     * Gets a relation
     * @return List&lt;Relation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No results </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid query </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid attribute </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public List<Relation> getAllRelations() throws ApiException {
        ApiResponse<List<Relation>> localVarResp = getAllRelationsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Gets all the relations in the Knowledge Graph ontology
     * Gets a relation
     * @return ApiResponse&lt;List&lt;Relation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No results </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid query </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid attribute </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Relation>> getAllRelationsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllRelationsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Relation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets all the relations in the Knowledge Graph ontology (asynchronously)
     * Gets a relation
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No results </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid query </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid attribute </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllRelationsAsync(final ApiCallback<List<Relation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllRelationsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Relation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAttribute
     * @param id The attribute&#39;s id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No results </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid query </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid attribute </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAttributeCall(URI id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/attributes/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAttributeValidateBeforeCall(URI id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getAttribute(Async)");
        }
        

        okhttp3.Call localVarCall = getAttributeCall(id, _callback);
        return localVarCall;

    }

    /**
     * Gets an attribute
     * Gets an attirbute
     * @param id The attribute&#39;s id (required)
     * @return Attribute
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No results </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid query </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid attribute </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public Attribute getAttribute(URI id) throws ApiException {
        ApiResponse<Attribute> localVarResp = getAttributeWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Gets an attribute
     * Gets an attirbute
     * @param id The attribute&#39;s id (required)
     * @return ApiResponse&lt;Attribute&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No results </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid query </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid attribute </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Attribute> getAttributeWithHttpInfo(URI id) throws ApiException {
        okhttp3.Call localVarCall = getAttributeValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Attribute>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets an attribute (asynchronously)
     * Gets an attirbute
     * @param id The attribute&#39;s id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No results </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid query </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid attribute </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAttributeAsync(URI id, final ApiCallback<Attribute> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAttributeValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Attribute>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getConcept
     * @param id The concept&#39;s id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No results </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid query </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid attribute </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConceptCall(URI id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/concepts/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getConceptValidateBeforeCall(URI id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getConcept(Async)");
        }
        

        okhttp3.Call localVarCall = getConceptCall(id, _callback);
        return localVarCall;

    }

    /**
     * Gets a concept
     * Gets a concept
     * @param id The concept&#39;s id (required)
     * @return Concept
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No results </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid query </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid attribute </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public Concept getConcept(URI id) throws ApiException {
        ApiResponse<Concept> localVarResp = getConceptWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Gets a concept
     * Gets a concept
     * @param id The concept&#39;s id (required)
     * @return ApiResponse&lt;Concept&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No results </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid query </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid attribute </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Concept> getConceptWithHttpInfo(URI id) throws ApiException {
        okhttp3.Call localVarCall = getConceptValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Concept>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a concept (asynchronously)
     * Gets a concept
     * @param id The concept&#39;s id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No results </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid query </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid attribute </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConceptAsync(URI id, final ApiCallback<Concept> _callback) throws ApiException {

        okhttp3.Call localVarCall = getConceptValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Concept>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFrame
     * @param id The frame&#39;s id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No results </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid query </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid attribute </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFrameCall(URI id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/frames/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFrameValidateBeforeCall(URI id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getFrame(Async)");
        }
        

        okhttp3.Call localVarCall = getFrameCall(id, _callback);
        return localVarCall;

    }

    /**
     * Gets a frame
     * Gets a frame
     * @param id The frame&#39;s id (required)
     * @return Frame
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No results </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid query </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid attribute </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public Frame getFrame(URI id) throws ApiException {
        ApiResponse<Frame> localVarResp = getFrameWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Gets a frame
     * Gets a frame
     * @param id The frame&#39;s id (required)
     * @return ApiResponse&lt;Frame&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No results </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid query </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid attribute </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Frame> getFrameWithHttpInfo(URI id) throws ApiException {
        okhttp3.Call localVarCall = getFrameValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Frame>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a frame (asynchronously)
     * Gets a frame
     * @param id The frame&#39;s id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No results </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid query </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid attribute </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFrameAsync(URI id, final ApiCallback<Frame> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFrameValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Frame>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRelation
     * @param id The relation&#39;s id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No results </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid query </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid attribute </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRelationCall(URI id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/relations/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRelationValidateBeforeCall(URI id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getRelation(Async)");
        }
        

        okhttp3.Call localVarCall = getRelationCall(id, _callback);
        return localVarCall;

    }

    /**
     * Gets a relation
     * Gets a relation
     * @param id The relation&#39;s id (required)
     * @return Relation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No results </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid query </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid attribute </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public Relation getRelation(URI id) throws ApiException {
        ApiResponse<Relation> localVarResp = getRelationWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Gets a relation
     * Gets a relation
     * @param id The relation&#39;s id (required)
     * @return ApiResponse&lt;Relation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No results </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid query </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid attribute </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Relation> getRelationWithHttpInfo(URI id) throws ApiException {
        okhttp3.Call localVarCall = getRelationValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Relation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a relation (asynchronously)
     * Gets a relation
     * @param id The relation&#39;s id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No results </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid query </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid attribute </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRelationAsync(URI id, final ApiCallback<Relation> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRelationValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Relation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for search
     * @param query The query to search by (required)
     * @param etype Narrow search to a specific element type (optional, default to ANY)
     * @param details Details to be returned: e.g. for predicates: FULL&#x3D;full hierarchy, SUMMARY&#x3D;direct super\\subordinates, IDENTIFIER&#x3D;id only (optional, default to IDENTIFIER)
     * @param attribute Attribute to search by, either an annotation or a data property (optional, default to &quot;rdfs:label&quot;)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No results </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid query </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid attribute </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchCall(String query, String etype, String details, String attribute, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (etype != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("etype", etype));
        }

        if (details != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("details", details));
        }

        if (attribute != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attribute", attribute));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchValidateBeforeCall(String query, String etype, String details, String attribute, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling search(Async)");
        }
        

        okhttp3.Call localVarCall = searchCall(query, etype, details, attribute, _callback);
        return localVarCall;

    }

    /**
     * Knowledge search
     * Search knowledge items
     * @param query The query to search by (required)
     * @param etype Narrow search to a specific element type (optional, default to ANY)
     * @param details Details to be returned: e.g. for predicates: FULL&#x3D;full hierarchy, SUMMARY&#x3D;direct super\\subordinates, IDENTIFIER&#x3D;id only (optional, default to IDENTIFIER)
     * @param attribute Attribute to search by, either an annotation or a data property (optional, default to &quot;rdfs:label&quot;)
     * @return List&lt;ElementRanking&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No results </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid query </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid attribute </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public List<ElementRanking> search(String query, String etype, String details, String attribute) throws ApiException {
        ApiResponse<List<ElementRanking>> localVarResp = searchWithHttpInfo(query, etype, details, attribute);
        return localVarResp.getData();
    }

    /**
     * Knowledge search
     * Search knowledge items
     * @param query The query to search by (required)
     * @param etype Narrow search to a specific element type (optional, default to ANY)
     * @param details Details to be returned: e.g. for predicates: FULL&#x3D;full hierarchy, SUMMARY&#x3D;direct super\\subordinates, IDENTIFIER&#x3D;id only (optional, default to IDENTIFIER)
     * @param attribute Attribute to search by, either an annotation or a data property (optional, default to &quot;rdfs:label&quot;)
     * @return ApiResponse&lt;List&lt;ElementRanking&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No results </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid query </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid attribute </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ElementRanking>> searchWithHttpInfo(String query, String etype, String details, String attribute) throws ApiException {
        okhttp3.Call localVarCall = searchValidateBeforeCall(query, etype, details, attribute, null);
        Type localVarReturnType = new TypeToken<List<ElementRanking>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Knowledge search (asynchronously)
     * Search knowledge items
     * @param query The query to search by (required)
     * @param etype Narrow search to a specific element type (optional, default to ANY)
     * @param details Details to be returned: e.g. for predicates: FULL&#x3D;full hierarchy, SUMMARY&#x3D;direct super\\subordinates, IDENTIFIER&#x3D;id only (optional, default to IDENTIFIER)
     * @param attribute Attribute to search by, either an annotation or a data property (optional, default to &quot;rdfs:label&quot;)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No results </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid query </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid attribute </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchAsync(String query, String etype, String details, String attribute, final ApiCallback<List<ElementRanking>> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchValidateBeforeCall(query, etype, details, attribute, _callback);
        Type localVarReturnType = new TypeToken<List<ElementRanking>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
