openapi: 3.0.2
info:
  contact:
    email: ks-api@isagog.com
    name: Isagog Srl
  description: Isagog Knowledge Graph Interaction module
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Isagog Knowledge Graph Interaction Service
  version: 1.0.0
servers:
- url: http://api.isagog.com
  variables:
    port:
      default: "8030"
    basePath:
      default: /interact
tags:
- name: InteractionService
paths:
  /input:
    post:
      description: Processes the user input
      operationId: input
      parameters:
      - description: Upload context (KG id)
        explode: true
        in: query
        name: kg
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Sentence'
        description: User input
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                type: string
          description: Acknowledge message
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryResponse'
          description: Query response
        "202":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Frame'
                type: array
          description: Frame instantiation
        "203":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SentenceAnnotation'
          description: Sentence analysis
        "401":
          description: Unknown graph
        "402":
          description: Illegal input format
        "403":
          description: Meaningless input
        "501":
          description: Service unavailable
        "502":
          description: Server error
        "503":
          description: Missing implementation
      summary: User input
      tags:
      - InteractionService
      x-contentType: application/json
      x-accepts: application/json
  /issue:
    post:
      description: Sends a frame, e.g. a user query form, to the systems
      operationId: issue
      parameters:
      - description: Upload context (KG id)
        explode: true
        in: query
        name: kg
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Frame'
        description: Frame instance
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: Success acknowledge
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryResponse'
          description: Query response
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateResponse'
          description: Update response
        "401":
          description: Unknown graph
        "402":
          description: Malformed frame
        "501":
          description: Service unavailable
        "502":
          description: Server error
        "503":
          description: Missing implementation
      summary: Sends a frame instance for processing
      tags:
      - InteractionService
      x-contentType: application/json
      x-accepts: application/json
  /complete:
    get:
      description: Provides a list of candidate completions of the provided one
      operationId: complete
      parameters:
      - explode: true
        in: query
        name: hook
        required: true
        schema:
          format: utf8
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  format: utf8
                  type: string
                type: array
          description: Suitable completions
        "402":
          description: Illegal hook
        "501":
          description: Service unavailable
        "502":
          description: Server error
        "503":
          description: Missing implementation
      summary: Suggets completions
      tags:
      - InteractionService
      x-accepts: application/json
components:
  schemas:
    UploadForm:
      description: Upload form
      properties:
        format:
          description: Serialization format
          enum:
          - turtle
          - rdf-xml
          - rdf-json
          - json-ld
          - txt
          - csv
          type: string
        content:
          description: Serialized content
          format: binary
          type: string
      required:
      - content
      type: object
    Sentence:
      description: A single sentence
      example:
        context: context
        lang: en
        verbatim: verbatim
      properties:
        lang:
          description: Language
          enum:
          - en
          - es
          - fr
          - it
          - de
          type: string
        verbatim:
          description: Textual content
          type: string
        context:
          description: Textual context (opt)
          type: string
      required:
      - verbatim
      type: object
    QueryResponse:
      description: Query result set
      properties:
        handle:
          description: Handle to the query result for paging (opt)
          format: int64
          type: integer
        size:
          description: Total availabe results
          format: int32
          type: integer
        header:
          description: Result set description
          items:
            $ref: '#/components/schemas/ResponseHeader'
          type: array
        rows:
          description: Result items
          items:
            $ref: '#/components/schemas/ResponseRow'
          type: array
      required:
      - header
      type: object
    ResponseHeader:
      description: Query result set header
      properties:
        name:
          type: string
        dtype:
          enum:
          - URI
          - BOOLEAN
          - INTEGER
          - DOUBLE
          - STRING
          type: string
      required:
      - name
      type: object
    ResponseRow:
      description: Query result set row
      properties:
        values:
          items:
            format: utf8
            type: string
          type: array
        support:
          default: 1.0
          format: double
          maximum: 1.0
          minimum: 0.0
          type: number
      required:
      - values
      type: object
    Frame:
      allOf:
      - $ref: '#/components/schemas/KnowledgeElement'
      description: Conceptual pattern, e.g. a query or a form
      example:
        conceptualSlots:
        - value: value
        - value: value
        relationalSlots:
        - objectBinding: 77
          subjectBinding: 10
        - objectBinding: 77
          subjectBinding: 10
        attributiveSlots:
        - objectBinding: 76
          comparation: EQUAL
          subjectBinding: 18
        - objectBinding: 76
          comparation: EQUAL
          subjectBinding: 18
        valueSlots:
        - value: value
        - value: value
        id: id
      properties:
        id:
          description: Frame identifier
          format: id
          type: string
        conceptualSlots:
          description: Conceptual elements, up to 128
          items:
            $ref: '#/components/schemas/ConceptualSlot'
          type: array
        relationalSlots:
          description: Relational elements, up to 128
          items:
            $ref: '#/components/schemas/RelationalSlot'
          type: array
        attributiveSlots:
          description: Attributive elements, up to 128
          items:
            $ref: '#/components/schemas/AttributiveSlot'
          type: array
        valueSlots:
          description: Value elements, up to 128
          items:
            $ref: '#/components/schemas/ValueSlot'
          type: array
      required:
      - id
      - slots
      type: object
    KnowledgeElement:
      description: Managed knowledge element (should be abstract)
      discriminator:
        mapping:
          Concept: '#/components/schemas/Concept'
          Relation: '#/components/schemas/Relation'
          Attribute: '#/components/schemas/Attribute'
          Entity: '#/components/schemas/Entity'
          PredicateStatement: '#/components/schemas/PredicateStatement'
          EntityStatement: '#/components/schemas/EntityStatement'
          Frame: '#/components/schemas/Frame'
          ConceptualSlot: '#/components/schemas/ConceptualSlot'
          RelationalSlot: '#/components/schemas/RelationalSlot'
          AttributiveSlot: '#/components/schemas/AttributiveSlot'
        propertyName: ktype
      properties:
        ktype:
          description: Knowledge element type
          type: string
        annotations:
          description: Knowledge annotations
          items:
            $ref: '#/components/schemas/KnowledgeAnnotation'
          type: array
      required:
      - ktype
      type: object
    KnowledgeAnnotation:
      description: Base class for knowledge annotations
      discriminator:
        mapping:
          LinguisticAnnotation: '#/components/schemas/LinguisticAnnotation'
          MetaclassAnnotation: '#/components/schemas/MetaclassAnnotation'
          InformativeAnnotation: '#/components/schemas/InformativeAnnotation'
        propertyName: atype
      properties:
        atype:
          description: Annotation type
          type: string
        label:
          description: Annotation label (opt)
          type: string
      required:
      - atype
    LinguisticAnnotation:
      allOf:
      - $ref: '#/components/schemas/KnowledgeAnnotation'
      description: Linguistic attachment to knowledge elements
      properties:
        lang:
          enum:
          - en
          - es
          - de
          - fr
          - it
          type: string
        pos:
          description: Part of speech (opt)
          enum:
          - ADJ
          - ADV
          - NOUN
          - PRON
          - PROPN
          - NUM
          - VERB
          - NP
          - VP
          - X
          type: string
        form:
          description: Linguistic rendering (base form)
          type: string
        regex:
          description: Regular expression to match occurrences (opt)
          type: string
      required:
      - form
      - lang
    MetaclassAnnotation:
      allOf:
      - $ref: '#/components/schemas/KnowledgeAnnotation'
      description: Metaclass annotation
      required:
      - label
    InformativeAnnotation:
      allOf:
      - $ref: '#/components/schemas/KnowledgeAnnotation'
      description: Informative annotation
      required:
      - label
    Concept:
      allOf:
      - $ref: '#/components/schemas/KnowledgeElement'
      description: Unary classifier
      properties:
        id:
          description: Concept identifier (uri)
          format: id
          type: string
        statements:
          items:
            $ref: '#/components/schemas/PredicateStatement'
          type: array
      required:
      - id
      type: object
    PredicateStatement:
      allOf:
      - $ref: '#/components/schemas/Statement'
      description: Statement whose subject is a predicate
      properties:
        object:
          format: id
          type: string
        predicate:
          enum:
          - INCLUSION
          - DISJUNCTION
          - EQUIVALENCE
          type: string
      required:
      - object
      - predicate
      type: object
    Statement:
      allOf:
      - $ref: '#/components/schemas/KnowledgeElement'
      description: Knowledge statement
      discriminator:
        mapping:
          EntityStatement: '#/components/schemas/EntityStatement'
          PredicateStatement: '#/components/schemas/PredicateStatement'
        propertyName: ktype
      properties:
        subject:
          description: The predicate's subject id, may be omitted when the statement
            is contained in a structure
          format: id
          type: string
        privacy:
          default: OWNER
          enum:
          - OWNER
          - TRUSTED
          - CONTACTS
          - PUBLIC
          type: string
        support:
          format: double
          maximum: 1.0
          minimum: 0.0
          type: number
      required:
      - stype
      type: object
    EntityStatement:
      allOf:
      - $ref: '#/components/schemas/Statement'
      description: Statement whose subject is an individual (individual assertion)
      properties:
        predicate:
          description: Ontology relation or attribute
          format: id
          type: string
        relational:
          default: false
          type: boolean
        object:
          description: Statement's object, i.e. an id or a value
          format: utf8
          type: string
      required:
      - object
      - predicate
      type: object
    Relation:
      allOf:
      - $ref: '#/components/schemas/KnowledgeElement'
      description: Class of entity pairs
      properties:
        id:
          format: id
          type: string
        domain:
          description: Domain restriction
          format: id
          type: string
        range:
          description: Range restriction
          format: id
          type: string
      required:
      - id
    Attribute:
      allOf:
      - $ref: '#/components/schemas/KnowledgeElement'
      description: Class of Entity-value pairs
      properties:
        id:
          format: id
          type: string
        domain:
          description: Domain restriction
          format: id
          type: string
        range:
          default: STRING
          enum:
          - STRING
          - TEXT
          - INTEGER
          - DOUBLE
          type: string
      required:
      - id
    Entity:
      allOf:
      - $ref: '#/components/schemas/KnowledgeElement'
      description: Individual entity
      properties:
        id:
          format: id
          type: string
        statements:
          items:
            $ref: '#/components/schemas/EntityStatement'
          type: array
      required:
      - id
      type: object
    ConceptualSlot:
      allOf:
      - $ref: '#/components/schemas/Slot'
      description: A slot boud to a concept
      example:
        value: value
      properties:
        value:
          description: Constant Entity reference (opt)
          format: id
          type: string
    Slot:
      allOf:
      - $ref: '#/components/schemas/KnowledgeElement'
      description: Framed conceptual element
      discriminator:
        mapping:
          ConceptualSlot: '#/components/schemas/ConceptualSlot'
          RelationalSlot: '#/components/schemas/RelationalSlot'
          AttributiveSlot: '#/components/schemas/AttributiveSlot'
          ValueSlot: '#/components/schemas/ValueSlot'
        propertyName: ktype
      properties:
        id:
          description: Slot identifier, must be frame-unique
          format: int32
          maximum: 128
          minimum: 0
          type: integer
        name:
          description: Slot pretty name (opt)
          type: string
        predicate:
          description: Predicate identifier, should be a valid id in a known ontology
          format: id
          type: string
        required:
          default: false
          description: Tells if the slot must be instantiated in order for the frame
            to make sense
          type: boolean
        informative:
          default: false
          description: Tells whether slot's values contribute to frame's meaning
          type: boolean
      required:
      - id
      type: object
    RelationalSlot:
      allOf:
      - $ref: '#/components/schemas/Slot'
      description: A slot bound to a relation (property)
      example:
        objectBinding: 77
        subjectBinding: 10
      properties:
        subjectBinding:
          description: Slot's subject binding, must be a ConceptualSlot in the same
            frame.
          maximum: 128
          minimum: 0
          type: integer
        objectBinding:
          description: Slot's object binding, must be a ConceptualSlot in the same
            frame.
          maximum: 128
          minimum: 0
          type: integer
      required:
      - objectBinding
      - subjectBinding
      type: object
    AttributiveSlot:
      allOf:
      - $ref: '#/components/schemas/Slot'
      description: A slot bound to an Attribute (data property)
      example:
        objectBinding: 76
        comparation: EQUAL
        subjectBinding: 18
      properties:
        subjectBinding:
          description: Slot's subject binding, must be a ConceptualSlot in the same
            frame.
          maximum: 128
          minimum: 0
          type: integer
        objectBinding:
          description: Slot's object binding, must be a ValueSlot in the same frame.
          maximum: 128
          minimum: 0
          type: integer
        comparation:
          default: EQUAL
          description: Comparation operator for data values (opt)
          enum:
          - EQUAL
          - GREATER
          - SMALLER
          - SIMILAR
          type: string
      required:
      - objectBinding
      - subjectBinding
      type: object
    ValueSlot:
      allOf:
      - $ref: '#/components/schemas/Slot'
      description: A slot bound to a data item
      example:
        value: value
      properties:
        value:
          description: Constant data value (opt)
          format: utf8
          type: string
      type: object
    SentenceAnnotation:
      description: Text annotation
      properties:
        classes:
          description: Text classification
          items:
            $ref: '#/components/schemas/Classification'
          type: array
        tokens:
          description: Basic token annotation
          items:
            $ref: '#/components/schemas/BasicAnnotation'
          type: array
        entities:
          description: Entity annotation
          items:
            $ref: '#/components/schemas/EntityAnnotation'
          type: array
        dependencies:
          description: Dependencies
          items:
            $ref: '#/components/schemas/DependencyAnnotation'
          type: array
        sentence:
          $ref: '#/components/schemas/Sentence'
      type: object
    Classification:
      description: Text general classification (e.g. intent or sentiment)
      properties:
        classifier:
          type: string
        support:
          format: double
          maximum: 1.0
          minimum: 0.0
          type: number
      required:
      - classifier
      type: object
    BasicAnnotation:
      allOf:
      - $ref: '#/components/schemas/TokenAnnotation'
      description: Pos and lemma annotation
      properties:
        pos:
          description: Part of speech
          enum:
          - ADJ
          - ADP
          - ADV
          - AUX
          - CCONJ
          - DET
          - INTJ
          - NOUN
          - NUM
          - PART
          - PRON
          - PROPN
          - PUNCT
          - SCONJ
          - SYM
          - VERB
          - X
          type: string
        features:
          description: Grammatical features
          items:
            $ref: '#/components/schemas/GrammarFeature'
          type: array
        lemma:
          description: Base form
          type: string
      required:
      - lemma
      - pos
      type: object
    TokenAnnotation:
      description: Base class for token annotations, should be abstract
      discriminator:
        mapping:
          BasicAnnotation: '#/components/schemas/BasicAnnotation'
          EntityAnnotation: '#/components/schemas/EntityAnnotation'
          DependencyAnnotation: '#/components/schemas/DependencyAnnotation'
        propertyName: ttype
      properties:
        ttype:
          description: Token type
          type: string
        token:
          type: string
        offset:
          description: Head character offset
          format: int32
          minimum: 0
          type: integer
        support:
          format: double
          type: number
      required:
      - offset
      - token
      - ttype
      type: object
    EntityAnnotation:
      allOf:
      - $ref: '#/components/schemas/TokenAnnotation'
      description: Entity classifier and\or link
      properties:
        classes:
          description: Text classification
          items:
            $ref: '#/components/schemas/Classification'
          type: array
        links:
          items:
            format: uri
            type: string
          type: array
      type: object
    DependencyAnnotation:
      allOf:
      - $ref: '#/components/schemas/TokenAnnotation'
      description: Token dependency
      discriminator:
        mapping:
          SyntacticRelation: '#/components/schemas/SyntacticRelation'
          SemanticRelation: '#/components/schemas/SemanticRelation'
        propertyName: dtype
      properties:
        dtype:
          type: string
        governor:
          description: Head index of the governor's token
          format: int32
          minimum: 0
          type: integer
      required:
      - dtype
      - governor
      type: object
    SyntacticRelation:
      allOf:
      - $ref: '#/components/schemas/DependencyAnnotation'
      description: Governor's syntactin role
      properties:
        tag:
          description: Governor's syntactic role (Universal Dependencies)
          enum:
          - ACL
          - ADVCL
          - ADVMOD
          - AMOD
          - APPOS
          - AUX
          - CASE
          - CC
          - CCOMP
          - CLF
          - COMPOUND
          - CONJ
          - COP
          - CSUBJ
          - DEP
          - DET
          - DISCOURSE
          - DISLOCATED
          - EXPL
          - FIXED
          - FLAT
          - GOESWITH
          - IOBJ
          - LIST
          - MARK
          - NMOD
          - NSUBJ
          - NUMMOD
          - OBJ
          - OBL
          - ORPHAN
          - PARATAXIS
          - PUNCT
          - REPARANDUM
          - ROOT
          - VOCATIVE
          - XCOMP
          - OTHER
          type: string
        extension:
          description: Further details or non UD tag
          type: string
      required:
      - tag
      type: object
    SemanticRelation:
      allOf:
      - $ref: '#/components/schemas/DependencyAnnotation'
      description: Governor's semantic role
      properties:
        predicate:
          description: Ontology predicate (relation or attribute)
          format: id
          type: string
        role:
          description: Governor's predicative role (subject or object)
          enum:
          - SUBJECT
          - OBJECT
          type: string
      required:
      - predicate
      - role
      type: object
    GrammarFeature:
      description: Grammatic feature
      properties:
        attribute:
          enum:
          - NUMBER
          - PERSON
          - TENSE
          - MODE
          - NOUN-TYPE
          - VERB-TYPE
          - ADV-TYPE
          - ADJ-TYPE
          - X
          type: string
        value:
          type: string
      type: object
    UpdateResponse:
      description: Update response
      properties:
        report:
          description: Report
          items:
            $ref: '#/components/schemas/UpdateResponse_report'
          type: array
      required:
      - report
      type: object
    UpdateResponse_report:
      properties:
        code:
          enum:
          - OK
          - WARN
          - ERROR
          type: string
        message:
          type: string
      type: object

