/*
 * Isagog Knowledge Graph Service
 * Isagog Knowledge Graph Service API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: ks-api@isagog.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.isagog.kg.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.isagog.kg.model.ClassAnnotation;
import com.isagog.kg.model.DependencyAnnotation;
import com.isagog.kg.model.EntityAnnotation;
import com.isagog.kg.model.GrammarAnnotation;
import com.isagog.kg.model.RelationAnnotation;
import com.isagog.kg.model.Support;
import com.isagog.kg.model.SyntaxAnnotation;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * Token semantic dependency
 */
@ApiModel(description = "Token semantic dependency")
@JsonPropertyOrder({
  RelationAnnotation.JSON_PROPERTY_RELATION
})
@JsonTypeName("RelationAnnotation")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2020-10-07T16:45:57.251979+02:00[Europe/Berlin]")
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.EXISTING_PROPERTY, property = "atype", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = ClassAnnotation.class, name = "ClassAnnotation"),
  @JsonSubTypes.Type(value = DependencyAnnotation.class, name = "DependencyAnnotation"),
  @JsonSubTypes.Type(value = EntityAnnotation.class, name = "EntityAnnotation"),
  @JsonSubTypes.Type(value = GrammarAnnotation.class, name = "GrammarAnnotation"),
  @JsonSubTypes.Type(value = RelationAnnotation.class, name = "RelationAnnotation"),
  @JsonSubTypes.Type(value = SyntaxAnnotation.class, name = "SyntaxAnnotation"),
})

public class RelationAnnotation extends DependencyAnnotation {
  public static final String JSON_PROPERTY_RELATION = "relation";
  private String relation;


  public RelationAnnotation relation(String relation) {
    
    this.relation = relation;
    return this;
  }

   /**
   * Ontology relation
   * @return relation
  **/
  @ApiModelProperty(required = true, value = "Ontology relation")
  @JsonProperty(JSON_PROPERTY_RELATION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getRelation() {
    return relation;
  }


  public void setRelation(String relation) {
    this.relation = relation;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RelationAnnotation relationAnnotation = (RelationAnnotation) o;
    return Objects.equals(this.relation, relationAnnotation.relation) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(relation, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RelationAnnotation {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    relation: ").append(toIndentedString(relation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

