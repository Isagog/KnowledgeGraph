/*
 * Isagog Knowledge Graph Service
 * Isagog Knowledge Graph Service API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: ks-api@isagog.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.isagog.kg.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.isagog.kg.model.AttributiveSlot;
import com.isagog.kg.model.ConceptualSlot;
import com.isagog.kg.model.RelationalSlot;
import com.isagog.kg.model.Slot;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * A slot bound to an Attribute (data property)
 */
@ApiModel(description = "A slot bound to an Attribute (data property)")
@JsonPropertyOrder({
  AttributiveSlot.JSON_PROPERTY_SUBJECT_BINDING,
  AttributiveSlot.JSON_PROPERTY_VALUE_TYPE,
  AttributiveSlot.JSON_PROPERTY_COMPARATION
})
@JsonTypeName("AttributiveSlot")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2020-09-20T08:48:02.229570400+02:00[Europe/Berlin]")
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.EXISTING_PROPERTY, property = "stype", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = AttributiveSlot.class, name = "AttributiveSlot"),
  @JsonSubTypes.Type(value = ConceptualSlot.class, name = "ConceptualSlot"),
  @JsonSubTypes.Type(value = RelationalSlot.class, name = "RelationalSlot"),
})

public class AttributiveSlot extends Slot {
  public static final String JSON_PROPERTY_SUBJECT_BINDING = "subjectBinding";
  private String subjectBinding;

  /**
   * Semantics of the Attribute&#39;s value
   */
  public enum ValueTypeEnum {
    STRING("STRING"),
    
    NUMBER("NUMBER"),
    
    TEXT("TEXT"),
    
    DATE("DATE"),
    
    MONEY("MONEY"),
    
    LOCATION("LOCATION"),
    
    NAME("NAME"),
    
    ANY("ANY");

    private String value;

    ValueTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ValueTypeEnum fromValue(String value) {
      for (ValueTypeEnum b : ValueTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_VALUE_TYPE = "valueType";
  private ValueTypeEnum valueType = ValueTypeEnum.ANY;

  /**
   * The comparison operator when instantiated
   */
  public enum ComparationEnum {
    EQUAL("EQUAL"),
    
    GREATER("GREATER"),
    
    SMALLER("SMALLER"),
    
    SIMILAR("SIMILAR"),
    
    UNDEFINED("UNDEFINED");

    private String value;

    ComparationEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ComparationEnum fromValue(String value) {
      for (ComparationEnum b : ComparationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_COMPARATION = "comparation";
  private ComparationEnum comparation = ComparationEnum.UNDEFINED;


  public AttributiveSlot subjectBinding(String subjectBinding) {
    
    this.subjectBinding = subjectBinding;
    return this;
  }

   /**
   * The id of the slot representing the Attribute&#39;s subject
   * @return subjectBinding
  **/
  @ApiModelProperty(required = true, value = "The id of the slot representing the Attribute's subject")
  @JsonProperty(JSON_PROPERTY_SUBJECT_BINDING)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getSubjectBinding() {
    return subjectBinding;
  }


  public void setSubjectBinding(String subjectBinding) {
    this.subjectBinding = subjectBinding;
  }


  public AttributiveSlot valueType(ValueTypeEnum valueType) {
    
    this.valueType = valueType;
    return this;
  }

   /**
   * Semantics of the Attribute&#39;s value
   * @return valueType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Semantics of the Attribute's value")
  @JsonProperty(JSON_PROPERTY_VALUE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ValueTypeEnum getValueType() {
    return valueType;
  }


  public void setValueType(ValueTypeEnum valueType) {
    this.valueType = valueType;
  }


  public AttributiveSlot comparation(ComparationEnum comparation) {
    
    this.comparation = comparation;
    return this;
  }

   /**
   * The comparison operator when instantiated
   * @return comparation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The comparison operator when instantiated")
  @JsonProperty(JSON_PROPERTY_COMPARATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ComparationEnum getComparation() {
    return comparation;
  }


  public void setComparation(ComparationEnum comparation) {
    this.comparation = comparation;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AttributiveSlot attributiveSlot = (AttributiveSlot) o;
    return Objects.equals(this.subjectBinding, attributiveSlot.subjectBinding) &&
        Objects.equals(this.valueType, attributiveSlot.valueType) &&
        Objects.equals(this.comparation, attributiveSlot.comparation) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(subjectBinding, valueType, comparation, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AttributiveSlot {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    subjectBinding: ").append(toIndentedString(subjectBinding)).append("\n");
    sb.append("    valueType: ").append(toIndentedString(valueType)).append("\n");
    sb.append("    comparation: ").append(toIndentedString(comparation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

