openapi: 3.0.2
info:
  contact:
    email: ks-api@isagog.com
  description: Isagog Knowledge Graph Service API
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Isagog Knowledge Graph Service
  version: 1.0.0
externalDocs:
  description: See Isagog Knowledge API example
  url: https://isagog.com/knowledge/asyncapi.html
servers:
- url: http://localhost
  variables:
    port:
      default: "3200"
    basePath:
      default: /
tags:
- description: Isagog Knowledge Graph Service Specification
  externalDocs:
    url: http://isagog.com/kg/docs
  name: KnowledgeGraphService
paths:
  /create:
    post:
      description: Creates a Knowledge graph
      operationId: createGraph
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KnowledgeGraph'
        description: The graph to be created
        required: true
      responses:
        "200":
          description: Success
        "401":
          description: Duplicated ID
        "402":
          description: Invalid Graph
        "501":
          description: Service unavailable
        "502":
          description: Server error
      summary: Knowledge graph creation
      tags:
      - KnowledgeGraphService
      x-contentType: application/json
      x-accepts: application/json
  /list:
    get:
      description: Returns the list of available KGs (id)
      operationId: listGraphs
      parameters:
      - explode: true
        in: query
        name: summary
        required: false
        schema:
          default: false
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  format: id
                  type: string
                type: array
          description: Success, KG id list
        "201":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/KnowledgeGraph'
                type: array
          description: Success, KG summary (id,description,size) list
      summary: Lists Knowledge Graphs
      tags:
      - KnowledgeGraphService
      x-accepts: application/json
  /get:
    description: Returns a Knowledge Graph
    get:
      description: Returns a Knowledge Graph, either with summary or full content
      operationId: getGraph
      parameters:
      - description: The Knowledge Graph identifier
        explode: true
        in: query
        name: kg
        required: true
        schema:
          type: string
        style: form
      - allowEmptyValue: true
        description: 'Triggers full content: default = false'
        explode: true
        in: query
        name: content
        required: false
        schema:
          default: false
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KnowledgeGraph'
          description: Success, json content
        "201":
          content:
            application/zip:
              schema:
                format: binary
                type: string
          description: Success, zipped content
        "401":
          description: Unknown Graph
        "402":
          description: Graph too large
        "501":
          description: Service unavailable
        "502":
          description: Server error
      summary: Retrieves a Knowledge Graph
      tags:
      - KnowledgeGraphService
      x-accepts: application/json
    summary: Knowledge Graph
  /delete:
    get:
      description: Knowledge graph deletion
      operationId: deleteGraph
      parameters:
      - description: The Knowledge Graph identifier
        explode: true
        in: query
        name: kg
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          description: Success, json content
        "401":
          description: Unknown Graph
        "402":
          description: Dependencies violation
        "501":
          description: Service unavailable
        "502":
          description: Server error
      summary: Deletes a Knowledge Graph
      tags:
      - KnowledgeGraphService
      x-accepts: application/json
  /{kg}/get:
    get:
      description: Get the named element, if present
      operationId: getKnowledgeElement
      parameters:
      - explode: false
        in: path
        name: kg
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: id
        required: true
        schema:
          format: id
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/KnowledgeElement'
                type: array
          description: Success
        "401":
          description: Unknown graph
        "402":
          description: Unknown Entity
        "501":
          description: Service unavailable
        "502":
          description: Server error
      summary: Retrieves an element in a Knowledge Graph
      tags:
      - KnowledgeGraphService
      x-accepts: application/json
  /{kg}/assert:
    post:
      description: Asserts a statement in a Knowledge Graph
      operationId: assertStatement
      parameters:
      - description: Assertion context (KG id)
        explode: false
        in: path
        name: kg
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Statement'
        description: Type definition statement
        required: true
      responses:
        "200":
          description: Asserted successfully
        "401":
          description: Unknown graph
        "402":
          description: Bad statement
        "501":
          description: Service unavailable
        "502":
          description: Server error
      summary: Statement assertion
      tags:
      - KnowledgeGraphService
      x-contentType: application/json
      x-accepts: application/json
  /{kg}/retract:
    post:
      description: Retracts a statement and all the statements depending on it
      operationId: retractStatement
      parameters:
      - explode: false
        in: path
        name: kg
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Statement'
        required: true
      responses:
        "200":
          description: Success
        "401":
          description: Unknown graph
        "402":
          description: Bad statement
        "501":
          description: Service unavailable
        "502":
          description: Server error
      summary: Statement retraction
      tags:
      - KnowledgeGraphService
      x-contentType: application/json
      x-accepts: application/json
  /evaluate:
    get:
      description: Evaluates the Entity as an instance of the specified concept
      operationId: evaluateEntity
      parameters:
      - description: Evaluation context (opt)
        explode: true
        in: query
        name: kg
        required: false
        schema:
          format: id
          type: string
        style: form
      - description: Entity identifier
        explode: true
        in: query
        name: id
        required: true
        schema:
          type: string
        style: form
      - description: Concept to be evaluated
        explode: true
        in: query
        name: concept
        required: true
        schema:
          format: id
          type: string
        style: form
      - allowEmptyValue: true
        description: Inference method to be used
        explode: true
        in: query
        name: method
        required: false
        schema:
          default: DEDUCTION
          enum:
          - DEDUCTION
          - ABDUCTION
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Classification'
                type: array
          description: Success
        "401":
          description: Not found
        "402":
          description: Unknown graph
        "403":
          description: Invalid arguments
        "501":
          description: Service unavailable
        "502":
          description: Server error
      summary: Entity individual evaluation
      tags:
      - KnowledgeGraphService
      x-accepts: application/json
  /search:
    get:
      description: Search knowledge items
      operationId: search
      parameters:
      - description: Search context (opt)
        explode: true
        in: query
        name: kg
        required: false
        schema:
          format: id
          type: string
        style: form
      - description: The query to search by
        explode: false
        in: query
        name: query
        required: true
        schema:
          type: string
        style: form
      - description: The attribute to search by (opt)
        explode: true
        in: query
        name: attribute
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/KnowledgeElement'
                type: array
          description: Successful operation
        "201":
          description: No results
        "401":
          description: Unknown graph
        "402":
          description: Invalid key
        "501":
          description: Service unavailable
        "502":
          description: Server error
      summary: Knowledge search
      tags:
      - KnowledgeGraphService
      x-accepts: application/json
  /query:
    post:
      description: Queries a Knowledge Graph
      operationId: query
      parameters:
      - description: Query context (opt)
        explode: true
        in: query
        name: kg
        required: false
        schema:
          format: id
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Query'
        description: The query Frame
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryResponse'
          description: Success
        "401":
          description: Unknown graph
        "402":
          description: Invalid query
        "501":
          description: Service unavailable
        "502":
          description: Server error
      summary: Knowledge query
      tags:
      - KnowledgeGraphService
      x-contentType: application/json
      x-accepts: application/json
  /analyze:
    post:
      description: Provides an annotation of the supplied text object according to
        available knowledge, including entity recognition, linking and relations (opt)
      operationId: analyzeSentence
      parameters:
      - description: Analysis context (opt)
        explode: true
        in: query
        name: kg
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: task
        required: false
        schema:
          default: ENTITIES
          enum:
          - ENTITIES
          - CONCEPTS
          - RELATIONS
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TextualContent'
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TextAnnotation'
                type: array
          description: Success
        "401":
          description: Unknown graph
        "402":
          description: Invalid sentence
        "403":
          description: Unsupported task
        "501":
          description: Service unavailable
        "502":
          description: Server error
      summary: Sentence analysis
      tags:
      - KnowledgeGraphService
      x-contentType: application/json
      x-accepts: application/json
components:
  callbacks: {}
  links: {}
  schemas:
    KnowledgeGraph:
      description: Set of statements about conceptualized entities
      example:
        sources:
        - https://openapi-generator.tech
        - https://openapi-generator.tech
        size: 0
        context:
        - context
        - context
        description: description
        annotations:
        - property: property
          value: value
        - property: property
          value: value
        id: id
        ontologies:
        - https://openapi-generator.tech
        - https://openapi-generator.tech
        content:
        - null
        - null
      properties:
        id:
          description: Knowledge Graph id
          format: id
          type: string
        sources:
          description: KG sources
          items:
            format: uri
            type: string
          type: array
        description:
          description: KG description
          type: string
        size:
          description: Statement number
          format: int32
          type: integer
        ontologies:
          description: Ontologies where concepts and relations are defined (URIs)
          items:
            format: uri
            type: string
          type: array
        context:
          description: Other graphs providing contextual knowledge
          items:
            format: id
            type: string
          type: array
        content:
          description: KG content (statements)
          items:
            $ref: '#/components/schemas/EntityStatement'
          type: array
        annotations:
          description: KG annotation (application specific)
          items:
            $ref: '#/components/schemas/KnowledgeAnnotation'
          type: array
      required:
      - id
      type: object
    TextualContent:
      example:
        context: context
        text: text
        lang: en
      properties:
        lang:
          description: Language
          enum:
          - en
          - es
          - fr
          - it
          - de
          type: string
        text:
          description: Textual content
          format: byte
          type: string
        context:
          description: Textual context
          format: byte
          type: string
      required:
      - text
      type: object
    KnowledgeAnnotation:
      description: Annotation
      example:
        property: property
        value: value
      properties:
        property:
          description: The annotation property
          type: string
        value:
          description: The annotation
          format: byte
          type: string
      required:
      - property
      - value
      type: object
    Classification:
      description: Knowledge Element classification record
      example:
        method: DEDUCTION
        classifier:
          statements:
          - predicate: INCLUSION
            object: object
          - predicate: INCLUSION
            object: object
        support:
          evidence: 0.8008281904610115
          confidence: 6.027456183070403
      properties:
        classifier:
          $ref: '#/components/schemas/AtomicConcept'
        support:
          $ref: '#/components/schemas/Support'
        method:
          default: DEDUCTION
          enum:
          - DEDUCTION
          - ABDUCTION
          type: string
      required:
      - classifier
      type: object
    QueryResponse:
      description: Query result set
      example:
        query: query
        header:
        - name: name
          dtype: Uri
        - name: name
          dtype: Uri
        rows:
        - row:
          - row
          - row
          support:
            evidence: 0.8008281904610115
            confidence: 6.027456183070403
        - row:
          - row
          - row
          support:
            evidence: 0.8008281904610115
            confidence: 6.027456183070403
      properties:
        query:
          type: string
        header:
          items:
            $ref: '#/components/schemas/QueryResponseHeader'
          type: array
        rows:
          items:
            $ref: '#/components/schemas/QueryResponseItem'
          type: array
      required:
      - header
      - query
      - report
      - rows
      type: object
    QueryResponseHeader:
      description: Query result set header
      example:
        name: name
        dtype: Uri
      properties:
        name:
          type: string
        dtype:
          enum:
          - Uri
          - Boolean
          - Integer
          - Double
          - String
          type: string
      required:
      - dtype
      - name
      type: object
    QueryResponseItem:
      description: Query result set row
      example:
        row:
        - row
        - row
        support:
          evidence: 0.8008281904610115
          confidence: 6.027456183070403
      properties:
        row:
          items:
            type: string
          type: array
        support:
          $ref: '#/components/schemas/Support'
      required:
      - row
      - support
      type: object
    KnowledgeElement:
      description: Managed Knowledge Element
      discriminator:
        mapping:
          AtomicConcept: '#/components/schemas/AtomicConcept'
          RelationalConcept: '#/components/schemas/RelationalConcept'
          AttributiveConcept: '#/components/schemas/AttributiveConcept'
          Relation: '#/components/schemas/Relation'
          Attribute: '#/components/schemas/Attribute'
          Entity: '#/components/schemas/Entity'
          ConceptStatement: '#/components/schemas/ConceptStatement'
          EntityStatement: '#/components/schemas/EntityStatement'
          ClassificationStatement: '#/components/schemas/ClassificationStatement'
          RelationalStatement: '#/components/schemas/RelationalStatement'
          AttributiveStatement: '#/components/schemas/AttributiveStatement'
          Situation: '#/components/schemas/Situation'
        propertyName: ktype
      example:
        annotations:
        - property: property
          value: value
        - property: property
          value: value
        id: id
        ktype: AtomicConcept
      properties:
        id:
          format: id
          type: string
        ktype:
          enum:
          - AtomicConcept
          - RelationalConcept
          - AttributiveConcept
          - Relation
          - Entity
          - ConceptStatement
          - EntityStatement
          - ClassificationStatement
          - RelationalStatement
          - AttributiveStatement
          - Situation
          type: string
        annotations:
          items:
            $ref: '#/components/schemas/KnowledgeAnnotation'
          type: array
      required:
      - id
      - ktype
      type: object
    AtomicConcept:
      allOf:
      - $ref: '#/components/schemas/KnowledgeElement'
      description: Unary atomic classifier
      example:
        statements:
        - predicate: INCLUSION
          object: object
        - predicate: INCLUSION
          object: object
      properties:
        statements:
          items:
            $ref: '#/components/schemas/ConceptStatement'
          type: array
      type: object
    RelationalConcept:
      allOf:
      - $ref: '#/components/schemas/KnowledgeElement'
      description: Unary Relational classifier
      properties:
        relation:
          format: id
          type: string
        restriction:
          type: string
        quantifier:
          enum:
          - SOME
          - ALL
          - ATLEAST1
          - ATMOST1
          type: string
      required:
      - quantifier
      - relation
      type: object
    AttributiveConcept:
      allOf:
      - $ref: '#/components/schemas/KnowledgeElement'
      description: Unary attributive classifier
      properties:
        attribute:
          format: id
          type: string
        value:
          format: byte
          type: string
        constraint:
          default: HAS_SOME_VALUE
          enum:
          - HAS_SOME_VALUE
          - EQUALS
          - GREATER_THAN
          - SMALLER_THAN
          type: string
      required:
      - attribute
      type: object
    Relation:
      allOf:
      - $ref: '#/components/schemas/KnowledgeElement'
      description: Class of Entity pairs
    Attribute:
      allOf:
      - $ref: '#/components/schemas/KnowledgeElement'
      description: Class of Entity-value pairs
    Entity:
      allOf:
      - $ref: '#/components/schemas/KnowledgeElement'
      description: Individual entity
      properties:
        statements:
          items:
            $ref: '#/components/schemas/EntityStatement'
          type: array
      type: object
    Statement:
      allOf:
      - $ref: '#/components/schemas/KnowledgeElement'
      description: Knowledge assertion
      example:
        subject: subject
        privacy: OWNER
        support:
          evidence: 0.8008281904610115
          confidence: 6.027456183070403
      properties:
        subject:
          format: id
          type: string
        privacy:
          default: OWNER
          enum:
          - OWNER
          - TRUSTED
          - CONTACTS
          - PUBLIC
          type: string
        support:
          $ref: '#/components/schemas/Support'
      required:
      - subject
      type: object
    ConceptStatement:
      allOf:
      - $ref: '#/components/schemas/Statement'
      description: Conceptual assertion
      example:
        predicate: INCLUSION
        object: object
      properties:
        object:
          format: id
          type: string
        predicate:
          enum:
          - INCLUSION
          - DISJUNCTION
          - EQUIVALENCE
          type: string
      required:
      - object
      - predicate
      type: object
    EntityStatement:
      allOf:
      - $ref: '#/components/schemas/Statement'
      description: Individual assertion
    ClassificationStatement:
      allOf:
      - $ref: '#/components/schemas/EntityStatement'
      description: Entity classification
      properties:
        concept:
          format: id
          type: string
      required:
      - concept
      type: object
    RelationalStatement:
      allOf:
      - $ref: '#/components/schemas/EntityStatement'
      description: Entity relatedness
      properties:
        relation:
          description: Ontology relation
          format: id
          type: string
        entity:
          description: Related entity
          format: id
          type: string
      required:
      - entity
      - relation
      type: object
    AttributiveStatement:
      allOf:
      - $ref: '#/components/schemas/EntityStatement'
      description: Entity attribute
      properties:
        attribute:
          description: Ontology attribute
          format: id
          type: string
        values:
          description: Attribute values
          items:
            format: byte
            type: string
          type: array
      required:
      - attribute
      - values
      type: object
    LinguisticStatement:
      allOf:
      - $ref: '#/components/schemas/Statement'
      description: Natural language statement
      properties:
        utterance:
          description: Utterance
          format: byte
          type: string
      required:
      - utterance
      type: object
    Frame:
      allOf:
      - $ref: '#/components/schemas/KnowledgeElement'
      description: Frame type
      discriminator:
        mapping:
          Query: '#/components/schemas/Query'
          Situation: '#/components/schemas/Situation'
        propertyName: ftype
      properties:
        ftype:
          default: Situation
          enum:
          - Query
          - Situation
          type: string
        slots:
          description: List of conceptual elements
          items:
            $ref: '#/components/schemas/Slot'
          type: array
      required:
      - ftype
      - slots
      type: object
    Query:
      allOf:
      - $ref: '#/components/schemas/Frame'
      description: Query frame
      example:
        qtype: IndividuationQuery
      properties:
        qtype:
          enum:
          - IndividuationQuery
          - CardinalityQuery
          - ExtensionQuery
          type: string
      type: object
    Situation:
      allOf:
      - $ref: '#/components/schemas/Frame'
      description: Situation frame
    Slot:
      description: Framed conceptual element
      discriminator:
        mapping:
          ConceptualSlot: '#/components/schemas/ConceptualSlot'
          RelationalSlot: '#/components/schemas/RelationalSlot'
          AttributiveSlot: '#/components/schemas/AttributiveSlot'
        propertyName: stype
      properties:
        id:
          description: Slot identifier, must be univoque in the frame
          type: string
        stype:
          enum:
          - ConceptualSlot
          - RelationalSlot
          - AttributiveSlot
          type: string
        mandatory:
          default: false
          description: A slot that must be instantiated
          type: boolean
        distinguished:
          default: false
          description: A slot that has a specific pragmatic role
          type: boolean
        informative:
          default: false
          description: A slot that must be presented to consumers
          type: boolean
        ontologyReference:
          description: Ontology element linked to the slot
          format: id
          type: string
      required:
      - distinguished
      - id
      - lexicalAnnotations
      - mandatory
      - ontologyReference
      - stype
      - values
      type: object
    FrameInstance:
      description: Frame instance
      properties:
        ftype:
          description: Frame type identifier
          format: id
          type: string
        slotValues:
          items:
            $ref: '#/components/schemas/SlotValue'
          type: array
      required:
      - ftype
      type: object
    SlotSentenceMapping:
      properties:
        startIndex:
          format: int32
          type: integer
        endIndex:
          format: int32
          type: integer
      required:
      - endIndex
      - startIndex
      type: object
    ConceptualSlot:
      allOf:
      - $ref: '#/components/schemas/Slot'
    RelationalSlot:
      allOf:
      - $ref: '#/components/schemas/Slot'
      properties:
        subjectBinding:
          description: The id of the slot representing the Attribute's subject
          type: string
        objectBinding:
          format: id
          type: string
      required:
      - subjectBinding
      type: object
    AttributiveSlot:
      allOf:
      - $ref: '#/components/schemas/Slot'
      description: A slot bound to an Attribute (data property)
      properties:
        subjectBinding:
          description: The id of the slot representing the Attribute's subject
          format: id
          type: string
        valueType:
          default: ANY
          description: Semantics of the Attribute's value
          enum:
          - STRING
          - NUMBER
          - TEXT
          - DATE
          - MONEY
          - LOCATION
          - NAME
          - ANY
          type: string
        comparation:
          default: UNDEFINED
          description: The comparison operator when instantiated
          enum:
          - EQUAL
          - GREATER
          - SMALLER
          - SIMILAR
          - UNDEFINED
          type: string
      required:
      - subjectBinding
      type: object
    SlotValue:
      description: Slot value instance
      properties:
        slotTypeId:
          description: Slot type's identifier
          format: id
          type: string
        sourceType:
          default: UNDEFINED
          description: The value provenance
          enum:
          - USER_INPUT
          - KNOWLEGDE_BASE
          - UNDEFINED
          type: string
        value:
          format: byte
          type: string
        support:
          $ref: '#/components/schemas/Support'
      required:
      - slotTypeId
      - value
      type: object
    TextAnnotation:
      description: Text annotation
      discriminator:
        mapping:
          EntityAnnotation: '#/components/schemas/EntityAnnotation'
          GrammarAnnotation: '#/components/schemas/GrammarAnnotation'
          SyntaxAnnotation: '#/components/schemas/SyntaxAnnotation'
          DependencyAnnotation: '#/components/schemas/DependencyAnnotation'
          RelationAnnotation: '#/components/schemas/RelationAnnotation'
        propertyName: atype
      example:
        atype: EntityAnnotation
        index: 0
        support:
          evidence: 0.8008281904610115
          confidence: 6.027456183070403
      properties:
        index:
          description: Annotation array index, should be consistent with the container's
            one
          format: int32
          type: integer
        atype:
          enum:
          - EntityAnnotation
          - GrammarAnnotation
          - SyntaxAnnotation
          - DependencyAnnotation
          - RelationAnnotation
          type: string
        support:
          $ref: '#/components/schemas/Support'
      required:
      - atype
      - index
      type: object
    TokenAnnotation:
      allOf:
      - $ref: '#/components/schemas/TextAnnotation'
      description: Token annotation
      properties:
        start:
          format: int32
          type: integer
        end:
          format: int32
          type: integer
      required:
      - end
      - start
      type: object
    EntityAnnotation:
      allOf:
      - $ref: '#/components/schemas/TokenAnnotation'
      description: Entity classifier and\or link
      properties:
        classifiers:
          items:
            format: id
            type: string
          type: array
        links:
          items:
            format: uri
            type: string
          type: array
      required:
      - classifier
      type: object
    GrammarAnnotation:
      allOf:
      - $ref: '#/components/schemas/TokenAnnotation'
      description: Token grammar spec
      properties:
        pos:
          description: Part of speech
          enum:
          - NOUN
          - VERB
          - ADJECTIVE
          - ADVERB
          - PRONOUN
          - NUMERAL
          type: string
        spec:
          enum:
          - V-MODAL
          - V-AUXILIAR
          - N-NAME
          - QUALIFIER
          type: string
        number:
          enum:
          - SINGULAR
          - PLURAL
          - DUAL
          type: string
        person:
          enum:
          - FIRST
          - SECOND
          - THIRD
          type: string
      required:
      - pos
      type: object
    DependencyAnnotation:
      allOf:
      - $ref: '#/components/schemas/TextAnnotation'
      description: Token dependency
      properties:
        governor:
          description: Index of the governor token annotation
          format: int32
          type: integer
        dependent:
          description: Index of the dependent token annotation
          format: int32
          type: integer
      required:
      - dependent
      - governor
      type: object
    SyntaxAnnotation:
      allOf:
      - $ref: '#/components/schemas/DependencyAnnotation'
      description: Token syntactic dependency
      properties:
        syntax:
          enum:
          - OBJECT
          - SUBJECT
          - COMPLEMENT
          - ADJUNCT
          - COORDINATE
          type: string
      required:
      - syntax
      type: object
    RelationAnnotation:
      allOf:
      - $ref: '#/components/schemas/DependencyAnnotation'
      description: Token semantic dependency
      properties:
        relation:
          description: Ontology relation
          format: id
          type: string
      required:
      - relation
      type: object
    Support:
      description: Knowledge support score
      example:
        evidence: 0.8008281904610115
        confidence: 6.027456183070403
      properties:
        evidence:
          default: 0.5
          description: Evidence score [1=Positive evidence, 0=Negative evidence]
          format: double
          type: number
        confidence:
          default: 0.5
          description: Confidence score [1=Full confidence, 0=No confidence]
          format: double
          type: number
      required:
      - confidence
      - evidence
      type: object

