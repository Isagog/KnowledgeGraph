/*
 * Isagog Knowledge Service
 * Isagog Knowledge Graph Ontology service
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: ks-api@isagog.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.isagog.kg.api;

import com.isagog.kg.ApiCallback;
import com.isagog.kg.ApiClient;
import com.isagog.kg.ApiException;
import com.isagog.kg.ApiResponse;
import com.isagog.kg.Configuration;
import com.isagog.kg.Pair;
import com.isagog.kg.ProgressRequestBody;
import com.isagog.kg.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.isagog.kg.model.Attribute;
import com.isagog.kg.model.Concept;
import com.isagog.kg.model.ConceptualDetails;
import com.isagog.kg.model.Frame;
import com.isagog.kg.model.KnowledgeElement;
import com.isagog.kg.model.KnowledgeType;
import com.isagog.kg.model.Ontology;
import com.isagog.kg.model.Relation;
import java.net.URI;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class KnowledgeServiceApi {
    private ApiClient localVarApiClient;

    public KnowledgeServiceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public KnowledgeServiceApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for disjoint
     * @param first Candidate classifier (required)
     * @param second Candidate classifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No results </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid argument pair </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unknown first </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unwnown second </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disjointCall(URI first, URI second, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/axioms/disjontness";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (first != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("first", first));
        }

        if (second != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("second", second));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call disjointValidateBeforeCall(URI first, URI second, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'first' is set
        if (first == null) {
            throw new ApiException("Missing the required parameter 'first' when calling disjoint(Async)");
        }
        
        // verify the required parameter 'second' is set
        if (second == null) {
            throw new ApiException("Missing the required parameter 'second' when calling disjoint(Async)");
        }
        

        okhttp3.Call localVarCall = disjointCall(first, second, _callback);
        return localVarCall;

    }

    /**
     * True if the first classifier is disjoint from the second
     * 
     * @param first Candidate classifier (required)
     * @param second Candidate classifier (required)
     * @return Boolean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No results </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid argument pair </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unknown first </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unwnown second </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public Boolean disjoint(URI first, URI second) throws ApiException {
        ApiResponse<Boolean> localVarResp = disjointWithHttpInfo(first, second);
        return localVarResp.getData();
    }

    /**
     * True if the first classifier is disjoint from the second
     * 
     * @param first Candidate classifier (required)
     * @param second Candidate classifier (required)
     * @return ApiResponse&lt;Boolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No results </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid argument pair </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unknown first </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unwnown second </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Boolean> disjointWithHttpInfo(URI first, URI second) throws ApiException {
        okhttp3.Call localVarCall = disjointValidateBeforeCall(first, second, null);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * True if the first classifier is disjoint from the second (asynchronously)
     * 
     * @param first Candidate classifier (required)
     * @param second Candidate classifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No results </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid argument pair </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unknown first </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unwnown second </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disjointAsync(URI first, URI second, final ApiCallback<Boolean> _callback) throws ApiException {

        okhttp3.Call localVarCall = disjointValidateBeforeCall(first, second, _callback);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllAttributes
     * @param ns Attribute&#39;s namespace (opt) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No results </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid query </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid attribute </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllAttributesCall(String ns, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/attributes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ns != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ns", ns));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllAttributesValidateBeforeCall(String ns, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getAllAttributesCall(ns, _callback);
        return localVarCall;

    }

    /**
     * Gets all attributes in the Knowledge Graph ontology
     * Gets an attirbute
     * @param ns Attribute&#39;s namespace (opt) (optional)
     * @return List&lt;Attribute&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No results </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid query </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid attribute </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public List<Attribute> getAllAttributes(String ns) throws ApiException {
        ApiResponse<List<Attribute>> localVarResp = getAllAttributesWithHttpInfo(ns);
        return localVarResp.getData();
    }

    /**
     * Gets all attributes in the Knowledge Graph ontology
     * Gets an attirbute
     * @param ns Attribute&#39;s namespace (opt) (optional)
     * @return ApiResponse&lt;List&lt;Attribute&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No results </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid query </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid attribute </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Attribute>> getAllAttributesWithHttpInfo(String ns) throws ApiException {
        okhttp3.Call localVarCall = getAllAttributesValidateBeforeCall(ns, null);
        Type localVarReturnType = new TypeToken<List<Attribute>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets all attributes in the Knowledge Graph ontology (asynchronously)
     * Gets an attirbute
     * @param ns Attribute&#39;s namespace (opt) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No results </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid query </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid attribute </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllAttributesAsync(String ns, final ApiCallback<List<Attribute>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllAttributesValidateBeforeCall(ns, _callback);
        Type localVarReturnType = new TypeToken<List<Attribute>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllConcepts
     * @param ns Concept&#39;s namespace (opt) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No results </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid query </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid attribute </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllConceptsCall(String ns, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/concepts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ns != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ns", ns));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllConceptsValidateBeforeCall(String ns, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getAllConceptsCall(ns, _callback);
        return localVarCall;

    }

    /**
     * Get all the concepts in the Knowledge Graph
     * Get all the atomic concepts in the Knowledge Graph
     * @param ns Concept&#39;s namespace (opt) (optional)
     * @return List&lt;Concept&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No results </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid query </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid attribute </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public List<Concept> getAllConcepts(String ns) throws ApiException {
        ApiResponse<List<Concept>> localVarResp = getAllConceptsWithHttpInfo(ns);
        return localVarResp.getData();
    }

    /**
     * Get all the concepts in the Knowledge Graph
     * Get all the atomic concepts in the Knowledge Graph
     * @param ns Concept&#39;s namespace (opt) (optional)
     * @return ApiResponse&lt;List&lt;Concept&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No results </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid query </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid attribute </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Concept>> getAllConceptsWithHttpInfo(String ns) throws ApiException {
        okhttp3.Call localVarCall = getAllConceptsValidateBeforeCall(ns, null);
        Type localVarReturnType = new TypeToken<List<Concept>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the concepts in the Knowledge Graph (asynchronously)
     * Get all the atomic concepts in the Knowledge Graph
     * @param ns Concept&#39;s namespace (opt) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No results </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid query </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid attribute </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllConceptsAsync(String ns, final ApiCallback<List<Concept>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllConceptsValidateBeforeCall(ns, _callback);
        Type localVarReturnType = new TypeToken<List<Concept>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllFrames
     * @param ns The frame&#39;s namespace (opt) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No results </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid query </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid attribute </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllFramesCall(String ns, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/frames";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ns != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ns", ns));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllFramesValidateBeforeCall(String ns, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getAllFramesCall(ns, _callback);
        return localVarCall;

    }

    /**
     * Gets all the frames
     * Gets a frame
     * @param ns The frame&#39;s namespace (opt) (optional)
     * @return List&lt;Frame&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No results </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid query </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid attribute </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public List<Frame> getAllFrames(String ns) throws ApiException {
        ApiResponse<List<Frame>> localVarResp = getAllFramesWithHttpInfo(ns);
        return localVarResp.getData();
    }

    /**
     * Gets all the frames
     * Gets a frame
     * @param ns The frame&#39;s namespace (opt) (optional)
     * @return ApiResponse&lt;List&lt;Frame&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No results </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid query </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid attribute </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Frame>> getAllFramesWithHttpInfo(String ns) throws ApiException {
        okhttp3.Call localVarCall = getAllFramesValidateBeforeCall(ns, null);
        Type localVarReturnType = new TypeToken<List<Frame>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets all the frames (asynchronously)
     * Gets a frame
     * @param ns The frame&#39;s namespace (opt) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No results </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid query </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid attribute </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllFramesAsync(String ns, final ApiCallback<List<Frame>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllFramesValidateBeforeCall(ns, _callback);
        Type localVarReturnType = new TypeToken<List<Frame>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllOntologies
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No results </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid query </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid attribute </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllOntologiesCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ontologies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllOntologiesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getAllOntologiesCall(_callback);
        return localVarCall;

    }

    /**
     * Get ontologies
     * Get all the known ontologies
     * @return List&lt;Ontology&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No results </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid query </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid attribute </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public List<Ontology> getAllOntologies() throws ApiException {
        ApiResponse<List<Ontology>> localVarResp = getAllOntologiesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get ontologies
     * Get all the known ontologies
     * @return ApiResponse&lt;List&lt;Ontology&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No results </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid query </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid attribute </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Ontology>> getAllOntologiesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllOntologiesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Ontology>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get ontologies (asynchronously)
     * Get all the known ontologies
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No results </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid query </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid attribute </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllOntologiesAsync(final ApiCallback<List<Ontology>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllOntologiesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Ontology>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllRelations
     * @param ns Relation&#39;s namespace (opt) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No results </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid query </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid attribute </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllRelationsCall(String ns, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/relations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ns != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ns", ns));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllRelationsValidateBeforeCall(String ns, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getAllRelationsCall(ns, _callback);
        return localVarCall;

    }

    /**
     * Gets all the relations in the Knowledge Graph ontology
     * Gets a relation
     * @param ns Relation&#39;s namespace (opt) (optional)
     * @return List&lt;Relation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No results </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid query </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid attribute </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public List<Relation> getAllRelations(String ns) throws ApiException {
        ApiResponse<List<Relation>> localVarResp = getAllRelationsWithHttpInfo(ns);
        return localVarResp.getData();
    }

    /**
     * Gets all the relations in the Knowledge Graph ontology
     * Gets a relation
     * @param ns Relation&#39;s namespace (opt) (optional)
     * @return ApiResponse&lt;List&lt;Relation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No results </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid query </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid attribute </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Relation>> getAllRelationsWithHttpInfo(String ns) throws ApiException {
        okhttp3.Call localVarCall = getAllRelationsValidateBeforeCall(ns, null);
        Type localVarReturnType = new TypeToken<List<Relation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets all the relations in the Knowledge Graph ontology (asynchronously)
     * Gets a relation
     * @param ns Relation&#39;s namespace (opt) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No results </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid query </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid attribute </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllRelationsAsync(String ns, final ApiCallback<List<Relation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllRelationsValidateBeforeCall(ns, _callback);
        Type localVarReturnType = new TypeToken<List<Relation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAttribute
     * @param uri The attribute&#39;s uri (required)
     * @param details Details to be fetched (opt), defaults to any (optional, default to NONE)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No results </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid query </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid attribute </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAttributeCall(URI uri, ConceptualDetails details, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/attributes/{uri}"
            .replaceAll("\\{" + "uri" + "\\}", localVarApiClient.escapeString(uri.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (details != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("details", details));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAttributeValidateBeforeCall(URI uri, ConceptualDetails details, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'uri' is set
        if (uri == null) {
            throw new ApiException("Missing the required parameter 'uri' when calling getAttribute(Async)");
        }
        

        okhttp3.Call localVarCall = getAttributeCall(uri, details, _callback);
        return localVarCall;

    }

    /**
     * Gets an attribute
     * Gets an attirbute
     * @param uri The attribute&#39;s uri (required)
     * @param details Details to be fetched (opt), defaults to any (optional, default to NONE)
     * @return Attribute
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No results </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid query </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid attribute </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public Attribute getAttribute(URI uri, ConceptualDetails details) throws ApiException {
        ApiResponse<Attribute> localVarResp = getAttributeWithHttpInfo(uri, details);
        return localVarResp.getData();
    }

    /**
     * Gets an attribute
     * Gets an attirbute
     * @param uri The attribute&#39;s uri (required)
     * @param details Details to be fetched (opt), defaults to any (optional, default to NONE)
     * @return ApiResponse&lt;Attribute&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No results </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid query </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid attribute </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Attribute> getAttributeWithHttpInfo(URI uri, ConceptualDetails details) throws ApiException {
        okhttp3.Call localVarCall = getAttributeValidateBeforeCall(uri, details, null);
        Type localVarReturnType = new TypeToken<Attribute>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets an attribute (asynchronously)
     * Gets an attirbute
     * @param uri The attribute&#39;s uri (required)
     * @param details Details to be fetched (opt), defaults to any (optional, default to NONE)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No results </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid query </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid attribute </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAttributeAsync(URI uri, ConceptualDetails details, final ApiCallback<Attribute> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAttributeValidateBeforeCall(uri, details, _callback);
        Type localVarReturnType = new TypeToken<Attribute>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getConcept
     * @param uri The concept&#39;s uri (required)
     * @param details Details to be fetched (opt), defaults to any (optional, default to NONE)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No results </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid query </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid attribute </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConceptCall(URI uri, ConceptualDetails details, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/concepts/{uri}"
            .replaceAll("\\{" + "uri" + "\\}", localVarApiClient.escapeString(uri.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (details != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("details", details));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getConceptValidateBeforeCall(URI uri, ConceptualDetails details, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'uri' is set
        if (uri == null) {
            throw new ApiException("Missing the required parameter 'uri' when calling getConcept(Async)");
        }
        

        okhttp3.Call localVarCall = getConceptCall(uri, details, _callback);
        return localVarCall;

    }

    /**
     * Gets a concept
     * Gets a concept
     * @param uri The concept&#39;s uri (required)
     * @param details Details to be fetched (opt), defaults to any (optional, default to NONE)
     * @return Concept
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No results </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid query </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid attribute </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public Concept getConcept(URI uri, ConceptualDetails details) throws ApiException {
        ApiResponse<Concept> localVarResp = getConceptWithHttpInfo(uri, details);
        return localVarResp.getData();
    }

    /**
     * Gets a concept
     * Gets a concept
     * @param uri The concept&#39;s uri (required)
     * @param details Details to be fetched (opt), defaults to any (optional, default to NONE)
     * @return ApiResponse&lt;Concept&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No results </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid query </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid attribute </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Concept> getConceptWithHttpInfo(URI uri, ConceptualDetails details) throws ApiException {
        okhttp3.Call localVarCall = getConceptValidateBeforeCall(uri, details, null);
        Type localVarReturnType = new TypeToken<Concept>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a concept (asynchronously)
     * Gets a concept
     * @param uri The concept&#39;s uri (required)
     * @param details Details to be fetched (opt), defaults to any (optional, default to NONE)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No results </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid query </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid attribute </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConceptAsync(URI uri, ConceptualDetails details, final ApiCallback<Concept> _callback) throws ApiException {

        okhttp3.Call localVarCall = getConceptValidateBeforeCall(uri, details, _callback);
        Type localVarReturnType = new TypeToken<Concept>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFrame
     * @param uri The frame&#39;s id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No results </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid query </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid attribute </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFrameCall(URI uri, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/frames/{uri}"
            .replaceAll("\\{" + "uri" + "\\}", localVarApiClient.escapeString(uri.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFrameValidateBeforeCall(URI uri, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'uri' is set
        if (uri == null) {
            throw new ApiException("Missing the required parameter 'uri' when calling getFrame(Async)");
        }
        

        okhttp3.Call localVarCall = getFrameCall(uri, _callback);
        return localVarCall;

    }

    /**
     * Gets a frame
     * Gets a frame
     * @param uri The frame&#39;s id (required)
     * @return Frame
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No results </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid query </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid attribute </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public Frame getFrame(URI uri) throws ApiException {
        ApiResponse<Frame> localVarResp = getFrameWithHttpInfo(uri);
        return localVarResp.getData();
    }

    /**
     * Gets a frame
     * Gets a frame
     * @param uri The frame&#39;s id (required)
     * @return ApiResponse&lt;Frame&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No results </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid query </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid attribute </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Frame> getFrameWithHttpInfo(URI uri) throws ApiException {
        okhttp3.Call localVarCall = getFrameValidateBeforeCall(uri, null);
        Type localVarReturnType = new TypeToken<Frame>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a frame (asynchronously)
     * Gets a frame
     * @param uri The frame&#39;s id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No results </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid query </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid attribute </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFrameAsync(URI uri, final ApiCallback<Frame> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFrameValidateBeforeCall(uri, _callback);
        Type localVarReturnType = new TypeToken<Frame>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRelation
     * @param uri The relation&#39;s uri (required)
     * @param details Details to be fetched (opt), defaults to any (optional, default to NONE)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No results </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid query </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid attribute </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRelationCall(URI uri, ConceptualDetails details, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/relations/{uri}"
            .replaceAll("\\{" + "uri" + "\\}", localVarApiClient.escapeString(uri.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (details != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("details", details));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRelationValidateBeforeCall(URI uri, ConceptualDetails details, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'uri' is set
        if (uri == null) {
            throw new ApiException("Missing the required parameter 'uri' when calling getRelation(Async)");
        }
        

        okhttp3.Call localVarCall = getRelationCall(uri, details, _callback);
        return localVarCall;

    }

    /**
     * Gets a relation
     * Gets a relation
     * @param uri The relation&#39;s uri (required)
     * @param details Details to be fetched (opt), defaults to any (optional, default to NONE)
     * @return Relation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No results </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid query </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid attribute </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public Relation getRelation(URI uri, ConceptualDetails details) throws ApiException {
        ApiResponse<Relation> localVarResp = getRelationWithHttpInfo(uri, details);
        return localVarResp.getData();
    }

    /**
     * Gets a relation
     * Gets a relation
     * @param uri The relation&#39;s uri (required)
     * @param details Details to be fetched (opt), defaults to any (optional, default to NONE)
     * @return ApiResponse&lt;Relation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No results </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid query </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid attribute </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Relation> getRelationWithHttpInfo(URI uri, ConceptualDetails details) throws ApiException {
        okhttp3.Call localVarCall = getRelationValidateBeforeCall(uri, details, null);
        Type localVarReturnType = new TypeToken<Relation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a relation (asynchronously)
     * Gets a relation
     * @param uri The relation&#39;s uri (required)
     * @param details Details to be fetched (opt), defaults to any (optional, default to NONE)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No results </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid query </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid attribute </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRelationAsync(URI uri, ConceptualDetails details, final ApiCallback<Relation> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRelationValidateBeforeCall(uri, details, _callback);
        Type localVarReturnType = new TypeToken<Relation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for includes
     * @param sup Candidate super classifier (required)
     * @param sub Candidate sub classifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No results </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid argument pair </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unknown superclass </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unwnown subclass </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call includesCall(URI sup, URI sub, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/axioms/inclusion";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sup", sup));
        }

        if (sub != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sub", sub));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call includesValidateBeforeCall(URI sup, URI sub, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'sup' is set
        if (sup == null) {
            throw new ApiException("Missing the required parameter 'sup' when calling includes(Async)");
        }
        
        // verify the required parameter 'sub' is set
        if (sub == null) {
            throw new ApiException("Missing the required parameter 'sub' when calling includes(Async)");
        }
        

        okhttp3.Call localVarCall = includesCall(sup, sub, _callback);
        return localVarCall;

    }

    /**
     * True if the first classifier is broader than the second
     * 
     * @param sup Candidate super classifier (required)
     * @param sub Candidate sub classifier (required)
     * @return Boolean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No results </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid argument pair </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unknown superclass </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unwnown subclass </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public Boolean includes(URI sup, URI sub) throws ApiException {
        ApiResponse<Boolean> localVarResp = includesWithHttpInfo(sup, sub);
        return localVarResp.getData();
    }

    /**
     * True if the first classifier is broader than the second
     * 
     * @param sup Candidate super classifier (required)
     * @param sub Candidate sub classifier (required)
     * @return ApiResponse&lt;Boolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No results </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid argument pair </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unknown superclass </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unwnown subclass </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Boolean> includesWithHttpInfo(URI sup, URI sub) throws ApiException {
        okhttp3.Call localVarCall = includesValidateBeforeCall(sup, sub, null);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * True if the first classifier is broader than the second (asynchronously)
     * 
     * @param sup Candidate super classifier (required)
     * @param sub Candidate sub classifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No results </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid argument pair </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unknown superclass </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unwnown subclass </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call includesAsync(URI sup, URI sub, final ApiCallback<Boolean> _callback) throws ApiException {

        okhttp3.Call localVarCall = includesValidateBeforeCall(sup, sub, _callback);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for search
     * @param query The value to search by (required)
     * @param attribute Attribute to search by, either an annotation or a data property (optional, default to &quot;rdfs:label&quot;)
     * @param ktype Narrow search to a specific knowledge type (optional)
     * @param details Details to be returned: e.g. for predicates: FULL&#x3D;full hierarchy, SUMMARY&#x3D;direct super\\subordinates, IDENTIFIER&#x3D;id only (optional, default to NONE)
     * @param ns The namespace to search by (opt) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No results </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid query </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid attribute </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchCall(String query, String attribute, KnowledgeType ktype, ConceptualDetails details, String ns, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/knowledge/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (attribute != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attribute", attribute));
        }

        if (ktype != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ktype", ktype));
        }

        if (details != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("details", details));
        }

        if (ns != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ns", ns));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchValidateBeforeCall(String query, String attribute, KnowledgeType ktype, ConceptualDetails details, String ns, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling search(Async)");
        }
        

        okhttp3.Call localVarCall = searchCall(query, attribute, ktype, details, ns, _callback);
        return localVarCall;

    }

    /**
     * Knowledge search
     * Search knowledge items
     * @param query The value to search by (required)
     * @param attribute Attribute to search by, either an annotation or a data property (optional, default to &quot;rdfs:label&quot;)
     * @param ktype Narrow search to a specific knowledge type (optional)
     * @param details Details to be returned: e.g. for predicates: FULL&#x3D;full hierarchy, SUMMARY&#x3D;direct super\\subordinates, IDENTIFIER&#x3D;id only (optional, default to NONE)
     * @param ns The namespace to search by (opt) (optional)
     * @return List&lt;KnowledgeElement&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No results </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid query </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid attribute </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public List<KnowledgeElement> search(String query, String attribute, KnowledgeType ktype, ConceptualDetails details, String ns) throws ApiException {
        ApiResponse<List<KnowledgeElement>> localVarResp = searchWithHttpInfo(query, attribute, ktype, details, ns);
        return localVarResp.getData();
    }

    /**
     * Knowledge search
     * Search knowledge items
     * @param query The value to search by (required)
     * @param attribute Attribute to search by, either an annotation or a data property (optional, default to &quot;rdfs:label&quot;)
     * @param ktype Narrow search to a specific knowledge type (optional)
     * @param details Details to be returned: e.g. for predicates: FULL&#x3D;full hierarchy, SUMMARY&#x3D;direct super\\subordinates, IDENTIFIER&#x3D;id only (optional, default to NONE)
     * @param ns The namespace to search by (opt) (optional)
     * @return ApiResponse&lt;List&lt;KnowledgeElement&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No results </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid query </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid attribute </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<KnowledgeElement>> searchWithHttpInfo(String query, String attribute, KnowledgeType ktype, ConceptualDetails details, String ns) throws ApiException {
        okhttp3.Call localVarCall = searchValidateBeforeCall(query, attribute, ktype, details, ns, null);
        Type localVarReturnType = new TypeToken<List<KnowledgeElement>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Knowledge search (asynchronously)
     * Search knowledge items
     * @param query The value to search by (required)
     * @param attribute Attribute to search by, either an annotation or a data property (optional, default to &quot;rdfs:label&quot;)
     * @param ktype Narrow search to a specific knowledge type (optional)
     * @param details Details to be returned: e.g. for predicates: FULL&#x3D;full hierarchy, SUMMARY&#x3D;direct super\\subordinates, IDENTIFIER&#x3D;id only (optional, default to NONE)
     * @param ns The namespace to search by (opt) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No results </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid query </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid attribute </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchAsync(String query, String attribute, KnowledgeType ktype, ConceptualDetails details, String ns, final ApiCallback<List<KnowledgeElement>> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchValidateBeforeCall(query, attribute, ktype, details, ns, _callback);
        Type localVarReturnType = new TypeToken<List<KnowledgeElement>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
