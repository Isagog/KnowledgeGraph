/*
 * Isagog Knowledge Service
 * Isagog Knowledge Graph Ontology service
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: ks-api@isagog.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.isagog.kg.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.isagog.kg.model.Attribute;
import com.isagog.kg.model.AttributiveSlot;
import com.isagog.kg.model.Classifier;
import com.isagog.kg.model.Comparator;
import com.isagog.kg.model.Concept;
import com.isagog.kg.model.ConceptualSlot;
import com.isagog.kg.model.Entity;
import com.isagog.kg.model.Frame;
import com.isagog.kg.model.KnowledgeAnnotation;
import com.isagog.kg.model.Quantifier;
import com.isagog.kg.model.Relation;
import com.isagog.kg.model.RelationalSlot;
import com.isagog.kg.model.Statement;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.net.URI;
import java.util.ArrayList;
import java.util.List;

/**
 * Unary classifier, can be atomic, or defined as a restriction on Relation or Attributes
 */
@ApiModel(description = "Unary classifier, can be atomic, or defined as a restriction on Relation or Attributes")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-05-07T11:03:37.592+02:00[Europe/Berlin]")
public class Concept extends Classifier {
  public static final String SERIALIZED_NAME_PROPERTY = "property";
  @SerializedName(SERIALIZED_NAME_PROPERTY)
  private URI property;

  public static final String SERIALIZED_NAME_RELATED = "related";
  @SerializedName(SERIALIZED_NAME_RELATED)
  private URI related;

  public static final String SERIALIZED_NAME_QUANTIFIER = "quantifier";
  @SerializedName(SERIALIZED_NAME_QUANTIFIER)
  private Quantifier quantifier;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private String value;

  public static final String SERIALIZED_NAME_CONSTRAINT = "constraint";
  @SerializedName(SERIALIZED_NAME_CONSTRAINT)
  private Comparator constraint = Comparator.EQUAL;

  public Concept() {
    this.ktype = this.getClass().getSimpleName();
  }

  public Concept property(URI property) {
    
    this.property = property;
    return this;
  }

   /**
   * For relationsl concepts, the relation or attribute identifier (opt)
   * @return property
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "For relationsl concepts, the relation or attribute identifier (opt)")

  public URI getProperty() {
    return property;
  }


  public void setProperty(URI property) {
    this.property = property;
  }


  public Concept related(URI related) {
    
    this.related = related;
    return this;
  }

   /**
   * For relational concepts, the restriction concept (opt)
   * @return related
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "For relational concepts, the restriction concept (opt)")

  public URI getRelated() {
    return related;
  }


  public void setRelated(URI related) {
    this.related = related;
  }


  public Concept quantifier(Quantifier quantifier) {
    
    this.quantifier = quantifier;
    return this;
  }

   /**
   * Get quantifier
   * @return quantifier
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Quantifier getQuantifier() {
    return quantifier;
  }


  public void setQuantifier(Quantifier quantifier) {
    this.quantifier = quantifier;
  }


  public Concept value(String value) {
    
    this.value = value;
    return this;
  }

   /**
   * For attributive concepts, the restriction value (opt)
   * @return value
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "For attributive concepts, the restriction value (opt)")

  public String getValue() {
    return value;
  }


  public void setValue(String value) {
    this.value = value;
  }


  public Concept constraint(Comparator constraint) {
    
    this.constraint = constraint;
    return this;
  }

   /**
   * Get constraint
   * @return constraint
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Comparator getConstraint() {
    return constraint;
  }


  public void setConstraint(Comparator constraint) {
    this.constraint = constraint;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Concept concept = (Concept) o;
    return Objects.equals(this.property, concept.property) &&
        Objects.equals(this.related, concept.related) &&
        Objects.equals(this.quantifier, concept.quantifier) &&
        Objects.equals(this.value, concept.value) &&
        Objects.equals(this.constraint, concept.constraint) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(property, related, quantifier, value, constraint, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Concept {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    property: ").append(toIndentedString(property)).append("\n");
    sb.append("    related: ").append(toIndentedString(related)).append("\n");
    sb.append("    quantifier: ").append(toIndentedString(quantifier)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    constraint: ").append(toIndentedString(constraint)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

