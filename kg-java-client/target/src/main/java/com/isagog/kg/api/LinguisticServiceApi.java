/*
 * Isagog Knowledge Graph Language Service
 * Isagog Knowledge Graph Language module
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: ks-api@isagog.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.isagog.kg.api;

import com.isagog.kg.ApiCallback;
import com.isagog.kg.ApiClient;
import com.isagog.kg.ApiException;
import com.isagog.kg.ApiResponse;
import com.isagog.kg.Configuration;
import com.isagog.kg.Pair;
import com.isagog.kg.ProgressRequestBody;
import com.isagog.kg.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.isagog.kg.model.AnnotatedDocument;
import com.isagog.kg.model.AnnotatedSentence;
import com.isagog.kg.model.Document;
import com.isagog.kg.model.Sentence;
import com.isagog.kg.model.Task;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LinguisticServiceApi {
    private ApiClient localVarApiClient;

    public LinguisticServiceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LinguisticServiceApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for documentAnalysis
     * @param tasks Tasks to be executed (required)
     * @param document  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unknown graph </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid document </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unsupported task </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentAnalysisCall(List<Task> tasks, Document document, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = document;

        // create path and map variables
        String localVarPath = "/document/analyze";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tasks != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "tasks", tasks));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentAnalysisValidateBeforeCall(List<Task> tasks, Document document, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'tasks' is set
        if (tasks == null) {
            throw new ApiException("Missing the required parameter 'tasks' when calling documentAnalysis(Async)");
        }
        

        okhttp3.Call localVarCall = documentAnalysisCall(tasks, document, _callback);
        return localVarCall;

    }

    /**
     * Document analysis
     * Extract and analyze sentences from a document
     * @param tasks Tasks to be executed (required)
     * @param document  (optional)
     * @return AnnotatedDocument
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unknown graph </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid document </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unsupported task </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public AnnotatedDocument documentAnalysis(List<Task> tasks, Document document) throws ApiException {
        ApiResponse<AnnotatedDocument> localVarResp = documentAnalysisWithHttpInfo(tasks, document);
        return localVarResp.getData();
    }

    /**
     * Document analysis
     * Extract and analyze sentences from a document
     * @param tasks Tasks to be executed (required)
     * @param document  (optional)
     * @return ApiResponse&lt;AnnotatedDocument&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unknown graph </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid document </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unsupported task </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AnnotatedDocument> documentAnalysisWithHttpInfo(List<Task> tasks, Document document) throws ApiException {
        okhttp3.Call localVarCall = documentAnalysisValidateBeforeCall(tasks, document, null);
        Type localVarReturnType = new TypeToken<AnnotatedDocument>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Document analysis (asynchronously)
     * Extract and analyze sentences from a document
     * @param tasks Tasks to be executed (required)
     * @param document  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unknown graph </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid document </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unsupported task </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentAnalysisAsync(List<Task> tasks, Document document, final ApiCallback<AnnotatedDocument> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentAnalysisValidateBeforeCall(tasks, document, _callback);
        Type localVarReturnType = new TypeToken<AnnotatedDocument>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sentenceAnalysis
     * @param tasks Tasks to be executed (required)
     * @param sentence  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unknown graph </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid sentence </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unsupported task </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sentenceAnalysisCall(List<Task> tasks, Sentence sentence, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = sentence;

        // create path and map variables
        String localVarPath = "/sentence/analyze";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tasks != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "tasks", tasks));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sentenceAnalysisValidateBeforeCall(List<Task> tasks, Sentence sentence, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'tasks' is set
        if (tasks == null) {
            throw new ApiException("Missing the required parameter 'tasks' when calling sentenceAnalysis(Async)");
        }
        

        okhttp3.Call localVarCall = sentenceAnalysisCall(tasks, sentence, _callback);
        return localVarCall;

    }

    /**
     * Sentence analysis
     * Provides an annotation of the supplied sentence
     * @param tasks Tasks to be executed (required)
     * @param sentence  (optional)
     * @return AnnotatedSentence
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unknown graph </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid sentence </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unsupported task </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public AnnotatedSentence sentenceAnalysis(List<Task> tasks, Sentence sentence) throws ApiException {
        ApiResponse<AnnotatedSentence> localVarResp = sentenceAnalysisWithHttpInfo(tasks, sentence);
        return localVarResp.getData();
    }

    /**
     * Sentence analysis
     * Provides an annotation of the supplied sentence
     * @param tasks Tasks to be executed (required)
     * @param sentence  (optional)
     * @return ApiResponse&lt;AnnotatedSentence&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unknown graph </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid sentence </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unsupported task </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AnnotatedSentence> sentenceAnalysisWithHttpInfo(List<Task> tasks, Sentence sentence) throws ApiException {
        okhttp3.Call localVarCall = sentenceAnalysisValidateBeforeCall(tasks, sentence, null);
        Type localVarReturnType = new TypeToken<AnnotatedSentence>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Sentence analysis (asynchronously)
     * Provides an annotation of the supplied sentence
     * @param tasks Tasks to be executed (required)
     * @param sentence  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unknown graph </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid sentence </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unsupported task </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sentenceAnalysisAsync(List<Task> tasks, Sentence sentence, final ApiCallback<AnnotatedSentence> _callback) throws ApiException {

        okhttp3.Call localVarCall = sentenceAnalysisValidateBeforeCall(tasks, sentence, _callback);
        Type localVarReturnType = new TypeToken<AnnotatedSentence>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
