/*
 * Isagog Knowledge Graph Data Service
 * Isagog Knowledge Graph Data module
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: ks-api@isagog.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.isagog.kg.api;

import com.isagog.kg.ApiCallback;
import com.isagog.kg.ApiClient;
import com.isagog.kg.ApiException;
import com.isagog.kg.ApiResponse;
import com.isagog.kg.Configuration;
import com.isagog.kg.Pair;
import com.isagog.kg.ProgressRequestBody;
import com.isagog.kg.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.isagog.kg.model.Entity;
import com.isagog.kg.model.EntityDetails;
import com.isagog.kg.model.KnowledgeGraph;
import com.isagog.kg.model.QueryExpression;
import com.isagog.kg.model.QueryFrame;
import com.isagog.kg.model.QueryKeywords;
import com.isagog.kg.model.QueryResponse;
import com.isagog.kg.model.Statement;
import java.net.URI;
import com.isagog.kg.model.Upload;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DataServiceApi {
    private ApiClient localVarApiClient;

    public DataServiceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DataServiceApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createEntity
     * @param entity Entity record (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid element </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Unsupported element </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createEntityCall(Entity entity, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = entity;

        // create path and map variables
        String localVarPath = "/entities";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createEntityValidateBeforeCall(Entity entity, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'entity' is set
        if (entity == null) {
            throw new ApiException("Missing the required parameter 'entity' when calling createEntity(Async)");
        }
        

        okhttp3.Call localVarCall = createEntityCall(entity, _callback);
        return localVarCall;

    }

    /**
     * Entity creation
     * Creates a new entity uri and related statements
     * @param entity Entity record (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid element </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Unsupported element </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public void createEntity(Entity entity) throws ApiException {
        createEntityWithHttpInfo(entity);
    }

    /**
     * Entity creation
     * Creates a new entity uri and related statements
     * @param entity Entity record (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid element </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Unsupported element </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> createEntityWithHttpInfo(Entity entity) throws ApiException {
        okhttp3.Call localVarCall = createEntityValidateBeforeCall(entity, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Entity creation (asynchronously)
     * Creates a new entity uri and related statements
     * @param entity Entity record (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid element </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Unsupported element </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createEntityAsync(Entity entity, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createEntityValidateBeforeCall(entity, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for createStatement
     * @param statement Statement specification (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid element </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Unsupported element </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createStatementCall(Statement statement, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = statement;

        // create path and map variables
        String localVarPath = "/statements";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createStatementValidateBeforeCall(Statement statement, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'statement' is set
        if (statement == null) {
            throw new ApiException("Missing the required parameter 'statement' when calling createStatement(Async)");
        }
        

        okhttp3.Call localVarCall = createStatementCall(statement, _callback);
        return localVarCall;

    }

    /**
     * Statement creation
     * Creates a new statement
     * @param statement Statement specification (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid element </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Unsupported element </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public void createStatement(Statement statement) throws ApiException {
        createStatementWithHttpInfo(statement);
    }

    /**
     * Statement creation
     * Creates a new statement
     * @param statement Statement specification (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid element </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Unsupported element </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> createStatementWithHttpInfo(Statement statement) throws ApiException {
        okhttp3.Call localVarCall = createStatementValidateBeforeCall(statement, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Statement creation (asynchronously)
     * Creates a new statement
     * @param statement Statement specification (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid element </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Unsupported element </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createStatementAsync(Statement statement, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createStatementValidateBeforeCall(statement, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteEntity
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Element not found </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid element </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Protected element </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteEntityCall(URI id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/entities";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteEntityValidateBeforeCall(URI id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteEntity(Async)");
        }
        

        okhttp3.Call localVarCall = deleteEntityCall(id, _callback);
        return localVarCall;

    }

    /**
     * Entity deletion
     * Deletes an entity and related statements
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Element not found </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid element </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Protected element </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public void deleteEntity(URI id) throws ApiException {
        deleteEntityWithHttpInfo(id);
    }

    /**
     * Entity deletion
     * Deletes an entity and related statements
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Element not found </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid element </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Protected element </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteEntityWithHttpInfo(URI id) throws ApiException {
        okhttp3.Call localVarCall = deleteEntityValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Entity deletion (asynchronously)
     * Deletes an entity and related statements
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Element not found </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid element </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Protected element </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteEntityAsync(URI id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteEntityValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteStatement
     * @param statement Statement specification (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Element not found </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid element </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Protected element </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteStatementCall(Statement statement, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = statement;

        // create path and map variables
        String localVarPath = "/statements";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteStatementValidateBeforeCall(Statement statement, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'statement' is set
        if (statement == null) {
            throw new ApiException("Missing the required parameter 'statement' when calling deleteStatement(Async)");
        }
        

        okhttp3.Call localVarCall = deleteStatementCall(statement, _callback);
        return localVarCall;

    }

    /**
     * Statement deletion
     * Deletes a Statement
     * @param statement Statement specification (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Element not found </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid element </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Protected element </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public void deleteStatement(Statement statement) throws ApiException {
        deleteStatementWithHttpInfo(statement);
    }

    /**
     * Statement deletion
     * Deletes a Statement
     * @param statement Statement specification (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Element not found </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid element </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Protected element </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteStatementWithHttpInfo(Statement statement) throws ApiException {
        okhttp3.Call localVarCall = deleteStatementValidateBeforeCall(statement, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Statement deletion (asynchronously)
     * Deletes a Statement
     * @param statement Statement specification (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Element not found </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid element </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Protected element </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteStatementAsync(Statement statement, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteStatementValidateBeforeCall(statement, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllStatements
     * @param subject  (optional)
     * @param predicate  (optional)
     * @param value  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid element </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Unsupported element </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllStatementsCall(URI subject, URI predicate, String value, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/statements";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (subject != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("subject", subject));
        }

        if (predicate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("predicate", predicate));
        }

        if (value != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("value", value));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllStatementsValidateBeforeCall(URI subject, URI predicate, String value, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getAllStatementsCall(subject, predicate, value, _callback);
        return localVarCall;

    }

    /**
     * Get statements
     * Retrieve statements related to a predicate, object, or subject combination
     * @param subject  (optional)
     * @param predicate  (optional)
     * @param value  (optional)
     * @return List&lt;Statement&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid element </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Unsupported element </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public List<Statement> getAllStatements(URI subject, URI predicate, String value) throws ApiException {
        ApiResponse<List<Statement>> localVarResp = getAllStatementsWithHttpInfo(subject, predicate, value);
        return localVarResp.getData();
    }

    /**
     * Get statements
     * Retrieve statements related to a predicate, object, or subject combination
     * @param subject  (optional)
     * @param predicate  (optional)
     * @param value  (optional)
     * @return ApiResponse&lt;List&lt;Statement&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid element </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Unsupported element </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Statement>> getAllStatementsWithHttpInfo(URI subject, URI predicate, String value) throws ApiException {
        okhttp3.Call localVarCall = getAllStatementsValidateBeforeCall(subject, predicate, value, null);
        Type localVarReturnType = new TypeToken<List<Statement>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get statements (asynchronously)
     * Retrieve statements related to a predicate, object, or subject combination
     * @param subject  (optional)
     * @param predicate  (optional)
     * @param value  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid element </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Unsupported element </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllStatementsAsync(URI subject, URI predicate, String value, final ApiCallback<List<Statement>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllStatementsValidateBeforeCall(subject, predicate, value, _callback);
        Type localVarReturnType = new TypeToken<List<Statement>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEntity
     * @param id Entity identifier (required)
     * @param details Details to fetch (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Element not found </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid element </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Protected element </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEntityCall(URI id, EntityDetails details, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/entities";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (details != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("details", details));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEntityValidateBeforeCall(URI id, EntityDetails details, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getEntity(Async)");
        }
        

        okhttp3.Call localVarCall = getEntityCall(id, details, _callback);
        return localVarCall;

    }

    /**
     * Entity access
     * Returns knowledge about an entity
     * @param id Entity identifier (required)
     * @param details Details to fetch (optional)
     * @return Entity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Element not found </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid element </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Protected element </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public Entity getEntity(URI id, EntityDetails details) throws ApiException {
        ApiResponse<Entity> localVarResp = getEntityWithHttpInfo(id, details);
        return localVarResp.getData();
    }

    /**
     * Entity access
     * Returns knowledge about an entity
     * @param id Entity identifier (required)
     * @param details Details to fetch (optional)
     * @return ApiResponse&lt;Entity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Element not found </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid element </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Protected element </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Entity> getEntityWithHttpInfo(URI id, EntityDetails details) throws ApiException {
        okhttp3.Call localVarCall = getEntityValidateBeforeCall(id, details, null);
        Type localVarReturnType = new TypeToken<Entity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Entity access (asynchronously)
     * Returns knowledge about an entity
     * @param id Entity identifier (required)
     * @param details Details to fetch (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Element not found </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid element </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Protected element </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEntityAsync(URI id, EntityDetails details, final ApiCallback<Entity> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEntityValidateBeforeCall(id, details, _callback);
        Type localVarReturnType = new TypeToken<Entity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGraphs
     * @param update Last update (Seconds since Unix Epoch) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Element not found </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid element </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Protected element </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGraphsCall(Integer update, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/graphs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (update != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("update", update));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGraphsValidateBeforeCall(Integer update, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getGraphsCall(update, _callback);
        return localVarCall;

    }

    /**
     * Managed KGs
     * Lista all known Knowledge Graphs
     * @param update Last update (Seconds since Unix Epoch) (optional)
     * @return List&lt;KnowledgeGraph&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Element not found </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid element </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Protected element </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public List<KnowledgeGraph> getGraphs(Integer update) throws ApiException {
        ApiResponse<List<KnowledgeGraph>> localVarResp = getGraphsWithHttpInfo(update);
        return localVarResp.getData();
    }

    /**
     * Managed KGs
     * Lista all known Knowledge Graphs
     * @param update Last update (Seconds since Unix Epoch) (optional)
     * @return ApiResponse&lt;List&lt;KnowledgeGraph&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Element not found </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid element </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Protected element </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<KnowledgeGraph>> getGraphsWithHttpInfo(Integer update) throws ApiException {
        okhttp3.Call localVarCall = getGraphsValidateBeforeCall(update, null);
        Type localVarReturnType = new TypeToken<List<KnowledgeGraph>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Managed KGs (asynchronously)
     * Lista all known Knowledge Graphs
     * @param update Last update (Seconds since Unix Epoch) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Element not found </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid element </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Protected element </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGraphsAsync(Integer update, final ApiCallback<List<KnowledgeGraph>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGraphsValidateBeforeCall(update, _callback);
        Type localVarReturnType = new TypeToken<List<KnowledgeGraph>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for queryExpression
     * @param queryExpression The query (required)
     * @param kg Query context (opt) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unsupported language </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid query </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryExpressionCall(QueryExpression queryExpression, String kg, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = queryExpression;

        // create path and map variables
        String localVarPath = "/query/expression";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (kg != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("kg", kg));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryExpressionValidateBeforeCall(QueryExpression queryExpression, String kg, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'queryExpression' is set
        if (queryExpression == null) {
            throw new ApiException("Missing the required parameter 'queryExpression' when calling queryExpression(Async)");
        }
        

        okhttp3.Call localVarCall = queryExpressionCall(queryExpression, kg, _callback);
        return localVarCall;

    }

    /**
     * Issue a graph query
     * Queries the Knowledge Graph by a query expression, whose syntax is specified
     * @param queryExpression The query (required)
     * @param kg Query context (opt) (optional)
     * @return QueryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unsupported language </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid query </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public QueryResponse queryExpression(QueryExpression queryExpression, String kg) throws ApiException {
        ApiResponse<QueryResponse> localVarResp = queryExpressionWithHttpInfo(queryExpression, kg);
        return localVarResp.getData();
    }

    /**
     * Issue a graph query
     * Queries the Knowledge Graph by a query expression, whose syntax is specified
     * @param queryExpression The query (required)
     * @param kg Query context (opt) (optional)
     * @return ApiResponse&lt;QueryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unsupported language </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid query </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<QueryResponse> queryExpressionWithHttpInfo(QueryExpression queryExpression, String kg) throws ApiException {
        okhttp3.Call localVarCall = queryExpressionValidateBeforeCall(queryExpression, kg, null);
        Type localVarReturnType = new TypeToken<QueryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Issue a graph query (asynchronously)
     * Queries the Knowledge Graph by a query expression, whose syntax is specified
     * @param queryExpression The query (required)
     * @param kg Query context (opt) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unsupported language </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid query </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryExpressionAsync(QueryExpression queryExpression, String kg, final ApiCallback<QueryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = queryExpressionValidateBeforeCall(queryExpression, kg, _callback);
        Type localVarReturnType = new TypeToken<QueryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for queryFrame
     * @param queryFrame The query (required)
     * @param kg Query context (opt) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unsupported language </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid query </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryFrameCall(QueryFrame queryFrame, String kg, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = queryFrame;

        // create path and map variables
        String localVarPath = "/query/frame";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (kg != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("kg", kg));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryFrameValidateBeforeCall(QueryFrame queryFrame, String kg, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'queryFrame' is set
        if (queryFrame == null) {
            throw new ApiException("Missing the required parameter 'queryFrame' when calling queryFrame(Async)");
        }
        

        okhttp3.Call localVarCall = queryFrameCall(queryFrame, kg, _callback);
        return localVarCall;

    }

    /**
     * Knowledge query
     * Queries a Knowledge Graph
     * @param queryFrame The query (required)
     * @param kg Query context (opt) (optional)
     * @return QueryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unsupported language </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid query </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public QueryResponse queryFrame(QueryFrame queryFrame, String kg) throws ApiException {
        ApiResponse<QueryResponse> localVarResp = queryFrameWithHttpInfo(queryFrame, kg);
        return localVarResp.getData();
    }

    /**
     * Knowledge query
     * Queries a Knowledge Graph
     * @param queryFrame The query (required)
     * @param kg Query context (opt) (optional)
     * @return ApiResponse&lt;QueryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unsupported language </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid query </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<QueryResponse> queryFrameWithHttpInfo(QueryFrame queryFrame, String kg) throws ApiException {
        okhttp3.Call localVarCall = queryFrameValidateBeforeCall(queryFrame, kg, null);
        Type localVarReturnType = new TypeToken<QueryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Knowledge query (asynchronously)
     * Queries a Knowledge Graph
     * @param queryFrame The query (required)
     * @param kg Query context (opt) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unsupported language </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid query </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryFrameAsync(QueryFrame queryFrame, String kg, final ApiCallback<QueryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = queryFrameValidateBeforeCall(queryFrame, kg, _callback);
        Type localVarReturnType = new TypeToken<QueryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for queryKeywords
     * @param queryKeywords The query (required)
     * @param kg Query context (opt) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unsupported language </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid query </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryKeywordsCall(QueryKeywords queryKeywords, String kg, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = queryKeywords;

        // create path and map variables
        String localVarPath = "/query/keywords";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (kg != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("kg", kg));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryKeywordsValidateBeforeCall(QueryKeywords queryKeywords, String kg, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'queryKeywords' is set
        if (queryKeywords == null) {
            throw new ApiException("Missing the required parameter 'queryKeywords' when calling queryKeywords(Async)");
        }
        

        okhttp3.Call localVarCall = queryKeywordsCall(queryKeywords, kg, _callback);
        return localVarCall;

    }

    /**
     * Knowledge query
     * Queries a Knowledge Graph
     * @param queryKeywords The query (required)
     * @param kg Query context (opt) (optional)
     * @return QueryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unsupported language </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid query </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public QueryResponse queryKeywords(QueryKeywords queryKeywords, String kg) throws ApiException {
        ApiResponse<QueryResponse> localVarResp = queryKeywordsWithHttpInfo(queryKeywords, kg);
        return localVarResp.getData();
    }

    /**
     * Knowledge query
     * Queries a Knowledge Graph
     * @param queryKeywords The query (required)
     * @param kg Query context (opt) (optional)
     * @return ApiResponse&lt;QueryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unsupported language </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid query </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<QueryResponse> queryKeywordsWithHttpInfo(QueryKeywords queryKeywords, String kg) throws ApiException {
        okhttp3.Call localVarCall = queryKeywordsValidateBeforeCall(queryKeywords, kg, null);
        Type localVarReturnType = new TypeToken<QueryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Knowledge query (asynchronously)
     * Queries a Knowledge Graph
     * @param queryKeywords The query (required)
     * @param kg Query context (opt) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unsupported language </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Invalid query </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryKeywordsAsync(QueryKeywords queryKeywords, String kg, final ApiCallback<QueryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = queryKeywordsValidateBeforeCall(queryKeywords, kg, _callback);
        Type localVarReturnType = new TypeToken<QueryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for upload
     * @param kg  (required)
     * @param upload  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unknown graph </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Malformed document </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unsupported format </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadCall(String kg, Upload upload, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = upload;

        // create path and map variables
        String localVarPath = "/upload";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (kg != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("kg", kg));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadValidateBeforeCall(String kg, Upload upload, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'kg' is set
        if (kg == null) {
            throw new ApiException("Missing the required parameter 'kg' when calling upload(Async)");
        }
        

        okhttp3.Call localVarCall = uploadCall(kg, upload, _callback);
        return localVarCall;

    }

    /**
     * Bulk upload
     * Uploads a resource
     * @param kg  (required)
     * @param upload  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unknown graph </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Malformed document </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unsupported format </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public void upload(String kg, Upload upload) throws ApiException {
        uploadWithHttpInfo(kg, upload);
    }

    /**
     * Bulk upload
     * Uploads a resource
     * @param kg  (required)
     * @param upload  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unknown graph </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Malformed document </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unsupported format </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> uploadWithHttpInfo(String kg, Upload upload) throws ApiException {
        okhttp3.Call localVarCall = uploadValidateBeforeCall(kg, upload, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Bulk upload (asynchronously)
     * Uploads a resource
     * @param kg  (required)
     * @param upload  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unknown graph </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Malformed document </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unsupported format </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Missing implementation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadAsync(String kg, Upload upload, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadValidateBeforeCall(kg, upload, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
